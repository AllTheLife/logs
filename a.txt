Eval in Emacs: (lsp-bridge--first-start '50891)
Eval in Emacs: (message '"[LSP-Bridge] Start LSP server (clangd) for /home/was/a.cpp...")
Handlers: [<class 'core.handler.completion.Completion'>,
 <class 'core.handler.completion_item.CompletionItem'>,
 <class 'core.handler.find_define.FindDefine'>,
 <class 'core.handler.find_implementation.FindImplementation'>,
 <class 'core.handler.find_references.FindReferences'>,
 <class 'core.handler.hover.Hover'>,
 <class 'core.handler.signature_help.SignatureHelp'>,
 <class 'core.handler.prepare_rename.PrepareRename'>,
 <class 'core.handler.rename.Rename'>,
 <class 'core.handler.jdt_uri_resolver.JDTUriResolver'>,
 <class 'core.handler.deno_uri_resolver.DenoUriResolver'>,
 <class 'core.handler.code_action.CodeAction'>,
 <class 'core.handler.formatting.Formatting'>,
 <class 'core.handler.execute_command.ExecuteCommand'>,
 <class 'core.handler.workspace_symbol.WorkspaceSymbol'>,
 <class 'core.handler.call_hierarchy.PrepareCallHierarchy'>,
 <class 'core.handler.call_hierarchy.CallHierarchy'>,
 <class 'core.handler.call_hierarchy.PrepareCallHierarchyIncomingCalls'>,
 <class 'core.handler.call_hierarchy.PrepareCallHierarchyOutgoingCalls'>,
 <class 'core.handler.call_hierarchy.CallHierarchyIncomingCalls'>,
 <class 'core.handler.call_hierarchy.CallHierarchyOutgoingCalls'>]

--- [09:24:51.865163] Send initialize for /home/was/a.cpp (clangd)

--- [09:24:51.870903] Send (58660): initialize
{
   "id": 58660,
   "method": "initialize",
   "params": {
      "processId": 250379,
      "rootPath": "/home/was/a.cpp",
      "clientInfo": {
         "name": "emacs",
         "version": "GNU Emacs 28.2 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.24.36, cairo version 1.17.6)\n of 2023-01-03"
      },
      "rootUri": "file:///home/was/a.cpp",
      "capabilities": {
         "workspace": {
            "configuration": true,
            "symbol": {
               "resolveSupport": {
                  "properties": []
               }
            }
         },
         "textDocument": {
            "completion": {
               "completionItem": {
                  "snippetSupport": true,
                  "deprecatedSupport": true,
                  "tagSupport": {
                     "valueSet": [
                        1
                     ]
                  },
                  "resolveSupport": {
                     "properties": [
                        "documentation",
                        "detail",
                        "additionalTextEdits"
                     ]
                  }
               }
            },
            "codeAction": {
               "dynamicRegistration": false,
               "codeActionLiteralSupport": {
                  "codeActionKind": {
                     "valueSet": [
                        "quickfix",
                        "refactor",
                        "refactor.extract",
                        "refactor.inline",
                        "refactor.rewrite",
                        "source",
                        "source.organizeImports"
                     ]
                  }
               },
               "isPreferredSupport": true
            }
         }
      },
      "initializationOptions": {}
   },
   "jsonrpc": "2.0"
}
Eval in Emacs: (lsp-bridge-set-prefix-style '"ascii")
Eval in Emacs: (lsp-bridge-set-server-names '"/home/was/a.cpp" '("clangd"))
I[09:24:51.872] clangd version 14.0.6
I[09:24:51.872] Features: linux
I[09:24:51.872] PID: 250399
I[09:24:51.872] Working directory: /home/was
I[09:24:51.872] argv[0]: /usr/bin/clangd
I[09:24:51.872] argv[1]: --all-scopes-completion
I[09:24:51.872] argv[2]: --clang-tidy
I[09:24:51.872] argv[3]: --enable-config
I[09:24:51.872] argv[4]: --header-insertion-decorators=0
I[09:24:51.872] Starting LSP over stdin/stdout
I[09:24:51.872] <-- initialize(58660)
I[09:24:51.873] --> reply:initialize(58660) 0 ms

--- [09:24:51.873980] Recv response clangd (58660)
{
   "id": 58660,
   "jsonrpc": "2.0",
   "result": {
      "capabilities": {
         "astProvider": true,
         "callHierarchyProvider": true,
         "clangdInlayHintsProvider": true,
         "codeActionProvider": {
            "codeActionKinds": [
               "quickfix",
               "refactor",
               "info"
            ]
         },
         "compilationDatabase": {
            "automaticReload": true
         },
         "completionProvider": {
            "allCommitCharacters": [
               " ",
               "\t",
               "(",
               ")",
               "[",
               "]",
               "{",
               "}",
               "<",
               ">",
               ":",
               ";",
               ",",
               "+",
               "-",
               "/",
               "*",
               "%",
               "^",
               "&",
               "#",
               "?",
               ".",
               "=",
               "\"",
               "'",
               "|"
            ],
            "resolveProvider": false,
            "triggerCharacters": [
               ".",
               "<",
               ">",
               ":",
               "\"",
               "/",
               "*"
            ]
         },
         "declarationProvider": true,
         "definitionProvider": true,
         "documentFormattingProvider": true,
         "documentHighlightProvider": true,
         "documentLinkProvider": {
            "resolveProvider": false
         },
         "documentOnTypeFormattingProvider": {
            "firstTriggerCharacter": "\n",
            "moreTriggerCharacter": []
         },
         "documentRangeFormattingProvider": true,
         "documentSymbolProvider": true,
         "executeCommandProvider": {
            "commands": [
               "clangd.applyFix",
               "clangd.applyTweak"
            ]
         },
         "hoverProvider": true,
         "implementationProvider": true,
         "memoryUsageProvider": true,
         "referencesProvider": true,
         "renameProvider": true,
         "selectionRangeProvider": true,
         "semanticTokensProvider": {
            "full": {
               "delta": true
            },
            "legend": {
               "tokenModifiers": [
                  "declaration",
                  "deprecated",
                  "deduced",
                  "readonly",
                  "static",
                  "abstract",
                  "virtual",
                  "dependentName",
                  "defaultLibrary",
                  "usedAsMutableReference",
                  "functionScope",
                  "classScope",
                  "fileScope",
                  "globalScope"
               ],
               "tokenTypes": [
                  "variable",
                  "variable",
                  "parameter",
                  "function",
                  "method",
                  "function",
                  "property",
                  "variable",
                  "class",
                  "interface",
                  "enum",
                  "enumMember",
                  "type",
                  "type",
                  "unknown",
                  "namespace",
                  "typeParameter",
                  "concept",
                  "type",
                  "macro",
                  "comment"
               ]
            },
            "range": false
         },
         "signatureHelpProvider": {
            "triggerCharacters": [
               "(",
               ")",
               "{",
               "}",
               "<",
               ">",
               ","
            ]
         },
         "textDocumentSync": {
            "change": 2,
            "openClose": true,
            "save": true
         },
         "typeDefinitionProvider": true,
         "typeHierarchyProvider": true,
         "workspaceSymbolProvider": true
      },
      "serverInfo": {
         "name": "clangd",
         "version": "clangd version 14.0.6 linux x86_64-pc-linux-gnu"
      }
   }
}
I[09:24:51.874] <-- initialized

--- [09:24:51.874505] Send (notification): initialized
Eval in Emacs: (message '"[LSP-Bridge] Start LSP server (clangd) for /home/was/a.cpp with 'single-file' mode, enjoy hacking!")
{
   "method": "initialized",
   "params": {},
   "jsonrpc": "2.0"
}
I[09:24:51.874] <-- workspace/didChangeConfiguration

--- [09:24:51.874795] Send (notification): workspace/didChangeConfiguration
{
   "method": "workspace/didChangeConfiguration",
   "params": {
      "settings": {}
   },
   "jsonrpc": "2.0"
}
I[09:24:51.874] <-- textDocument/didOpen

--- [09:24:51.874918] Send (notification): textDocument/didOpen
{
   "method": "textDocument/didOpen",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "languageId": "c++",
         "version": 0,
         "text": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  return 0;\n}\n"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:51.875] Failed to find compilation database for /home/was/a.cpp
I[09:24:51.875] ASTWorker building file /home/was/a.cpp version 0 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
I[09:24:52.090] --> textDocument/publishDiagnostics

--- [09:24:52.095862] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [],
      "uri": "file:///home/was/a.cpp",
      "version": 0
   }
}
Eval in Emacs: (lsp-bridge-diagnostic--render '"/home/was/a.cpp" '())
I[09:24:53.276] <-- textDocument/didChange

--- [09:24:53.277070] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 1
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 4,
                  "character": 1
               },
               "end": {
                  "line": 4,
                  "character": 1
               }
            },
            "rangeLength": 0,
            "text": "\n"
         }
      ]
   },
   "jsonrpc": "2.0"
}

--- [09:24:53.279551] Start TabNine server/home/was/.TabNine/4.4.219/x86_64-unknown-linux-gnu/TabNine
I[09:24:53.283] <-- 
--- [09:24:53.283514] Send (notification): textDocument/didChange
textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 2
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 0
               },
               "end": {
                  "line": 5,
                  "character": 0
               }
            },
            "rangeLength": 0,
            "text": "  "
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:24:53.333] Failed to find compilation database for /home/was/a.cpp
I[09:24:53.334] ASTWorker building file /home/was/a.cpp version 2 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
I[09:24:53.340] --> textDocument/publishDiagnostics

--- [09:24:53.340465] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [],
      "uri": "file:///home/was/a.cpp",
      "version": 2
   }
}
I[09:24:53.384] <-- textDocument/completion(3477)
--- [09:24:53.383906] Send (3477): textDocument/completion

{
   "id": 3477,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 2
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:53.405] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:53.405] Code complete: 98 results from Sema, 100 from Index, 0 matched, 0 from identifiers, 100 returned (incomplete).
I[09:24:53.411] --> reply:textDocument/completion(3477) 27 ms

--- [09:24:53.414027] Recv response clangd (3477): textDocument/completion
{
   "id": 3477,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": true,
      "items": [
         {
            "detail": "int",
            "filterText": "argc",
            "insertText": "argc",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "argc",
            "score": 3.8036673069000244,
            "sortText": "3f8c90b7argc",
            "textEdit": {
               "newText": "argc",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "char **",
            "filterText": "argv",
            "insertText": "argv",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "argv",
            "score": 3.8036673069000244,
            "sortText": "3f8c90b7argv",
            "textEdit": {
               "newText": "argv",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "int",
            "filterText": "main",
            "insertText": "main(${1:int argc}, ${2:char **argv})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "main(int argc, char **argv)",
            "score": 1.6255683898925781,
            "sortText": "402fed60main",
            "textEdit": {
               "newText": "main(${1:int argc}, ${2:char **argv})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "std",
            "insertText": "std",
            "insertTextFormat": 1,
            "kind": 9,
            "label": "std",
            "score": 1.5999544858932495,
            "sortText": "403334b1std",
            "textEdit": {
               "newText": "std",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char",
            "insertText": "char",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char",
            "score": 1.2879788875579834,
            "sortText": "405b2382char",
            "textEdit": {
               "newText": "char",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char16_t",
            "insertText": "char16_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char16_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382char16_t",
            "textEdit": {
               "newText": "char16_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char32_t",
            "insertText": "char32_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char32_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382char32_t",
            "textEdit": {
               "newText": "char32_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "wchar_t",
            "insertText": "wchar_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "wchar_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382wchar_t",
            "textEdit": {
               "newText": "wchar_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "FILE",
            "insertText": "FILE",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "FILE",
            "score": 0.9800145626068115,
            "sortText": "40851dc4FILE",
            "textEdit": {
               "newText": "FILE",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <ctime>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <ctime>"
            },
            "filterText": "TIME_UTC",
            "insertText": "TIME_UTC",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "TIME_UTC",
            "score": 0.8430243730545044,
            "sortText": "40a82f8eTIME_UTC",
            "textEdit": {
               "newText": "TIME_UTC",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Nonnull",
            "insertText": "_Nonnull",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Nonnull",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Nonnull",
            "textEdit": {
               "newText": "_Nonnull",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Null_unspecified",
            "insertText": "_Null_unspecified",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Null_unspecified",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Null_unspecified",
            "textEdit": {
               "newText": "_Null_unspecified",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Nullable",
            "insertText": "_Nullable",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Nullable",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Nullable",
            "textEdit": {
               "newText": "_Nullable",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__FUNCTION__",
            "insertText": "__FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__FUNCTION__",
            "textEdit": {
               "newText": "__FUNCTION__",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__PRETTY_FUNCTION__",
            "insertText": "__PRETTY_FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__PRETTY_FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__PRETTY_FUNCTION__",
            "textEdit": {
               "newText": "__PRETTY_FUNCTION__",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__func__",
            "insertText": "__func__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__func__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__func__",
            "textEdit": {
               "newText": "__func__",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "alignas",
            "insertText": "alignas(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "alignas(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8alignas",
            "textEdit": {
               "newText": "alignas(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "alignof",
            "insertText": "alignof(${0:type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "alignof(type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8alignof",
            "textEdit": {
               "newText": "alignof(${0:type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "auto",
            "insertText": "auto",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "auto",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8auto",
            "textEdit": {
               "newText": "auto",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "bool",
            "insertText": "bool",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "bool",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8bool",
            "textEdit": {
               "newText": "bool",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "class",
            "insertText": "class",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "class",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8class",
            "textEdit": {
               "newText": "class",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "const",
            "insertText": "const",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "const",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8const",
            "textEdit": {
               "newText": "const",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "const_cast",
            "insertText": "const_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "const_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8const_cast",
            "textEdit": {
               "newText": "const_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "constexpr",
            "insertText": "constexpr",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "constexpr",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8constexpr",
            "textEdit": {
               "newText": "constexpr",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "decltype",
            "insertText": "decltype(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "decltype(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8decltype",
            "textEdit": {
               "newText": "decltype(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "delete",
            "insertText": "delete [] ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "delete [] expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8delete",
            "textEdit": {
               "newText": "delete [] ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "delete",
            "insertText": "delete ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "delete expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8delete",
            "textEdit": {
               "newText": "delete ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "do",
            "insertText": "do {\n${1:statements}\n}while (${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "do {statements}while (expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8do",
            "textEdit": {
               "newText": "do {\n${1:statements}\n}while (${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "double",
            "insertText": "double",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "double",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8double",
            "textEdit": {
               "newText": "double",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "dynamic_cast",
            "insertText": "dynamic_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "dynamic_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8dynamic_cast",
            "textEdit": {
               "newText": "dynamic_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "enum",
            "insertText": "enum",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "enum",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8enum",
            "textEdit": {
               "newText": "enum",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "extern",
            "insertText": "extern",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "extern",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8extern",
            "textEdit": {
               "newText": "extern",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "false",
            "insertText": "false",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "false",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8false",
            "textEdit": {
               "newText": "false",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "float",
            "insertText": "float",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "float",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8float",
            "textEdit": {
               "newText": "float",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "for",
            "insertText": "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "for (init-statement; condition; inc-expression) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8for",
            "textEdit": {
               "newText": "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "for",
            "insertText": "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "for (range-declaration : range-expression) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8for",
            "textEdit": {
               "newText": "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "goto",
            "insertText": "goto ${0:label};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "goto label;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8goto",
            "textEdit": {
               "newText": "goto ${0:label};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "if",
            "insertText": "if (${1:condition}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "if (condition) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8if",
            "textEdit": {
               "newText": "if (${1:condition}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "int",
            "insertText": "int",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "int",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8int",
            "textEdit": {
               "newText": "int",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "long",
            "insertText": "long",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "long",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8long",
            "textEdit": {
               "newText": "long",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "new",
            "insertText": "new ${1:type}(${0:expressions})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "new type(expressions)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8new",
            "textEdit": {
               "newText": "new ${1:type}(${0:expressions})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "new",
            "insertText": "new ${1:type}[${2:size}](${0:expressions})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "new type[size](expressions)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8new",
            "textEdit": {
               "newText": "new ${1:type}[${2:size}](${0:expressions})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "noexcept",
            "insertText": "noexcept(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "noexcept(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8noexcept",
            "textEdit": {
               "newText": "noexcept(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "std::nullptr_t",
            "filterText": "nullptr",
            "insertText": "nullptr",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "nullptr",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8nullptr",
            "textEdit": {
               "newText": "nullptr",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "operator",
            "insertText": "operator",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "operator",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8operator",
            "textEdit": {
               "newText": "operator",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "reinterpret_cast",
            "insertText": "reinterpret_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "reinterpret_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8reinterpret_cast",
            "textEdit": {
               "newText": "reinterpret_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "return",
            "insertText": "return ${0:expression};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "return expression;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8return",
            "textEdit": {
               "newText": "return ${0:expression};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "short",
            "insertText": "short",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "short",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8short",
            "textEdit": {
               "newText": "short",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "signed",
            "insertText": "signed",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "signed",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8signed",
            "textEdit": {
               "newText": "signed",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "sizeof",
            "insertText": "sizeof(${0:expression-or-type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "sizeof(expression-or-type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8sizeof",
            "textEdit": {
               "newText": "sizeof(${0:expression-or-type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "sizeof...",
            "insertText": "sizeof...(${0:parameter-pack})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "sizeof...(parameter-pack)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8sizeof...",
            "textEdit": {
               "newText": "sizeof...(${0:parameter-pack})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static",
            "insertText": "static",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "static",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static",
            "textEdit": {
               "newText": "static",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static_assert",
            "insertText": "static_assert(${1:expression}, ${0:message});",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "static_assert(expression, message);",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static_assert",
            "textEdit": {
               "newText": "static_assert(${1:expression}, ${0:message});",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static_cast",
            "insertText": "static_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "static_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static_cast",
            "textEdit": {
               "newText": "static_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "struct",
            "insertText": "struct",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "struct",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8struct",
            "textEdit": {
               "newText": "struct",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "switch",
            "insertText": "switch (${1:condition}) {\n${0:cases}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "switch (condition) {cases}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8switch",
            "textEdit": {
               "newText": "switch (${1:condition}) {\n${0:cases}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "thread_local",
            "insertText": "thread_local",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "thread_local",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8thread_local",
            "textEdit": {
               "newText": "thread_local",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "throw",
            "insertText": "throw ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "throw expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8throw",
            "textEdit": {
               "newText": "throw ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "true",
            "insertText": "true",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "true",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8true",
            "textEdit": {
               "newText": "true",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "try",
            "insertText": "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "try {statements} catch (declaration) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8try",
            "textEdit": {
               "newText": "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typedef",
            "insertText": "typedef ${1:type} ${0:name};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typedef type name;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typedef",
            "textEdit": {
               "newText": "typedef ${1:type} ${0:name};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "std::type_info",
            "filterText": "typeid",
            "insertText": "typeid(${0:expression-or-type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeid(expression-or-type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeid",
            "textEdit": {
               "newText": "typeid(${0:expression-or-type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typename",
            "insertText": "typename ${0:name}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typename name",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typename",
            "textEdit": {
               "newText": "typename ${0:name}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typeof",
            "insertText": "typeof(${0:type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeof(type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeof",
            "textEdit": {
               "newText": "typeof(${0:type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typeof",
            "insertText": "typeof ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeof expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeof",
            "textEdit": {
               "newText": "typeof ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "union",
            "insertText": "union",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "union",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8union",
            "textEdit": {
               "newText": "union",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "unsigned",
            "insertText": "unsigned",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "unsigned",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8unsigned",
            "textEdit": {
               "newText": "unsigned",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "using",
            "insertText": "using ${1:name} = ${0:type};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "using name = type;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8using",
            "textEdit": {
               "newText": "using ${1:name} = ${0:type};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "using namespace",
            "insertText": "using namespace ${0:identifier};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "using namespace identifier;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8using namespace",
            "textEdit": {
               "newText": "using namespace ${0:identifier};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "void",
            "insertText": "void",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "void",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8void",
            "textEdit": {
               "newText": "void",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "volatile",
            "insertText": "volatile",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "volatile",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8volatile",
            "textEdit": {
               "newText": "volatile",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "while",
            "insertText": "while (${1:condition}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "while (condition) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8while",
            "textEdit": {
               "newText": "while (${1:condition}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "u_char",
            "insertText": "u_char",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "u_char",
            "score": 0.7713049054145813,
            "sortText": "40ba8bc3u_char",
            "textEdit": {
               "newText": "u_char",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cwchar>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cwchar>"
            },
            "filterText": "__WCHAR_MAX",
            "insertText": "__WCHAR_MAX",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__WCHAR_MAX",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__WCHAR_MAX",
            "textEdit": {
               "newText": "__WCHAR_MAX",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cwchar>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cwchar>"
            },
            "filterText": "__WCHAR_MIN",
            "insertText": "__WCHAR_MIN",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__WCHAR_MIN",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__WCHAR_MIN",
            "textEdit": {
               "newText": "__WCHAR_MIN",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "__u_char_defined",
            "insertText": "__u_char_defined",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__u_char_defined",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__u_char_defined",
            "textEdit": {
               "newText": "__u_char_defined",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <ctime>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <ctime>"
            },
            "filterText": "sigevent",
            "insertText": "sigevent",
            "insertTextFormat": 1,
            "kind": 7,
            "label": "sigevent",
            "score": 0.5252236127853394,
            "sortText": "40f98af2sigevent",
            "textEdit": {
               "newText": "sigevent",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blkcnt64_t",
            "insertText": "blkcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blkcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blkcnt64_t",
            "textEdit": {
               "newText": "blkcnt64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blkcnt_t",
            "insertText": "blkcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blkcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blkcnt_t",
            "textEdit": {
               "newText": "blkcnt_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blksize_t",
            "insertText": "blksize_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blksize_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blksize_t",
            "textEdit": {
               "newText": "blksize_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "caddr_t",
            "insertText": "caddr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "caddr_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0caddr_t",
            "textEdit": {
               "newText": "caddr_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "daddr_t",
            "insertText": "daddr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "daddr_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0daddr_t",
            "textEdit": {
               "newText": "daddr_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "dev_t",
            "insertText": "dev_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "dev_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0dev_t",
            "textEdit": {
               "newText": "dev_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsblkcnt64_t",
            "insertText": "fsblkcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsblkcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsblkcnt64_t",
            "textEdit": {
               "newText": "fsblkcnt64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsblkcnt_t",
            "insertText": "fsblkcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsblkcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsblkcnt_t",
            "textEdit": {
               "newText": "fsblkcnt_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsfilcnt64_t",
            "insertText": "fsfilcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsfilcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsfilcnt64_t",
            "textEdit": {
               "newText": "fsfilcnt64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsfilcnt_t",
            "insertText": "fsfilcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsfilcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsfilcnt_t",
            "textEdit": {
               "newText": "fsfilcnt_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsid_t",
            "insertText": "fsid_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsid_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsid_t",
            "textEdit": {
               "newText": "fsid_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "gid_t",
            "insertText": "gid_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "gid_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0gid_t",
            "textEdit": {
               "newText": "gid_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "id_t",
            "insertText": "id_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "id_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0id_t",
            "textEdit": {
               "newText": "id_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "ino64_t",
            "insertText": "ino64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "ino64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0ino64_t",
            "textEdit": {
               "newText": "ino64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "ino_t",
            "insertText": "ino_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "ino_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0ino_t",
            "textEdit": {
               "newText": "ino_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "key_t",
            "insertText": "key_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "key_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0key_t",
            "textEdit": {
               "newText": "key_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "loff_t",
            "insertText": "loff_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "loff_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0loff_t",
            "textEdit": {
               "newText": "loff_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "mode_t",
            "insertText": "mode_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "mode_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0mode_t",
            "textEdit": {
               "newText": "mode_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "nlink_t",
            "insertText": "nlink_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "nlink_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0nlink_t",
            "textEdit": {
               "newText": "nlink_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "off64_t",
            "insertText": "off64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "off64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0off64_t",
            "textEdit": {
               "newText": "off64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "off_t",
            "insertText": "off_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "off_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0off_t",
            "textEdit": {
               "newText": "off_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "quad_t",
            "insertText": "quad_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "quad_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0quad_t",
            "textEdit": {
               "newText": "quad_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "register_t",
            "insertText": "register_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "register_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0register_t",
            "textEdit": {
               "newText": "register_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:24:53.487] <-- textDocument/didChange

--- [09:24:53.487696] Send (notification): textDocument/didChange
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '())
Eval in Emacs: (lsp-bridge-diagnostic--render '"/home/was/a.cpp" '())
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '())
Discard outdated response: received=3477, latest=61331
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 3
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 2
               },
               "end": {
                  "line": 5,
                  "character": 2
               }
            },
            "rangeLength": 0,
            "text": "p"
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:24:54.175] <-- textDocument/completion(35731)
--- [09:24:54.175863] Send (35731): textDocument/completion

{
   "id": 35731,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 3
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:54.176] <-- textDocument/didChange

--- [09:24:54.176067] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 4
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 3
               },
               "end": {
                  "line": 5,
                  "character": 3
               }
            },
            "rangeLength": 0,
            "text": "r"
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:24:54.176] <-- textDocument/completion(61331)

--- [09:24:54.176188] Send (61331): textDocument/completion
{
   "id": 61331,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 4
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:54.181] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:54.181] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:54.181] Code complete: 1 results from Sema, 35 from Index, 0 matched, 0 from identifiers, 36 returned.
I[09:24:54.181] Code complete: 1 results from Sema, 100 from Index, 0 matched, 0 from identifiers, 100 returned (incomplete).
I[09:24:54.182] --> reply:textDocument/completion(61331) 6 ms

--- [09:24:54.183634] Recv response clangd (61331): textDocument/completion
I[09:24:54.184] --> reply:textDocument/completion(35731) 8 ms
{
   "id": 61331,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <iterator>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "BidirectionalIterator",
            "documentation": {
               "kind": "plaintext",
               "value": "From <iterator>"
            },
            "filterText": "prev",
            "insertText": "prev(${1:BidirectionalIterator x})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "prev(BidirectionalIterator x, typename iterator_traits<BidirectionalIterator>::difference_type n = 1)",
            "score": 0.5271619558334351,
            "sortText": "40f90beaprev",
            "textEdit": {
               "newText": "prev(${1:BidirectionalIterator x})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nData structure for reader-writer lock variable handling. The structure of the attribute type is deliberately not exposed."
            },
            "filterText": "pthread_rwlock_t",
            "insertText": "pthread_rwlock_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "pthread_rwlock_t",
            "score": 0.5053281784057617,
            "sortText": "413df438pthread_rwlock_t",
            "textEdit": {
               "newText": "pthread_rwlock_t",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlockattr_t",
            "insertText": "pthread_rwlockattr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "pthread_rwlockattr_t",
            "score": 0.5053281784057617,
            "sortText": "413df438pthread_rwlockattr_t",
            "textEdit": {
               "newText": "pthread_rwlockattr_t",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockrdlock",
            "insertText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_clockrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockwrlock",
            "insertText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_clockwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy read-write lock RWLOCK."
            },
            "filterText": "pthread_rwlock_destroy",
            "insertText": "pthread_rwlock_destroy(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_destroy(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_destroy",
            "textEdit": {
               "newText": "pthread_rwlock_destroy(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize read-write lock RWLOCK using attributes ATTR, or use the default values if later is NULL."
            },
            "filterText": "pthread_rwlock_init",
            "insertText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_init(pthread_rwlock_t *__restrict rwlock, const pthread_rwlockattr_t *__restrict attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_init",
            "textEdit": {
               "newText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nAcquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_rdlock",
            "insertText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_rdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_rdlock",
            "textEdit": {
               "newText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedrdlock",
            "insertText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_timedrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedwrlock",
            "insertText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_timedwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to acquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_tryrdlock",
            "insertText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_tryrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to acquire write lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_trywrlock",
            "insertText": "pthread_rwlock_trywrlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_trywrlock",
            "textEdit": {
               "newText": "pthread_rwlock_trywrlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nUnlock RWLOCK."
            },
            "filterText": "pthread_rwlock_unlock",
            "insertText": "pthread_rwlock_unlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_unlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_unlock",
            "textEdit": {
               "newText": "pthread_rwlock_unlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nAcquire write lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_wrlock",
            "insertText": "pthread_rwlock_wrlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_wrlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_wrlock",
            "textEdit": {
               "newText": "pthread_rwlock_wrlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy attribute object ATTR."
            },
            "filterText": "pthread_rwlockattr_destroy",
            "insertText": "pthread_rwlockattr_destroy(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_destroy",
            "textEdit": {
               "newText": "pthread_rwlockattr_destroy(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current setting of reader/writer preference."
            },
            "filterText": "pthread_rwlockattr_getkind_np",
            "insertText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict attr, int *__restrict pref)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_getkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current setting of process-shared attribute of ATTR in PSHARED."
            },
            "filterText": "pthread_rwlockattr_getpshared",
            "insertText": "pthread_rwlockattr_getpshared(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict attr, int *__restrict pshared)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_getpshared",
            "textEdit": {
               "newText": "pthread_rwlockattr_getpshared(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pshared})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet reader/write preference."
            },
            "filterText": "pthread_rwlockattr_setkind_np",
            "insertText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *attr, int pref)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_setkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet process-shared attribute of ATTR to PSHARED."
            },
            "filterText": "pthread_rwlockattr_setpshared",
            "insertText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_setpshared",
            "textEdit": {
               "newText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdlib>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdlib>\nStore at most BUFLEN characters of the pathname of the slave pseudo terminal associated with the master FD is open on in BUF.\nReturn 0 on success, otherwise an error number."
            },
            "filterText": "ptsname_r",
            "insertText": "ptsname_r(${1:int fd}, ${2:char *buf}, ${3:size_t buflen})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "ptsname_r(int fd, char *buf, size_t buflen)",
            "score": 0.423080176115036,
            "sortText": "415d8987ptsname_r",
            "textEdit": {
               "newText": "ptsname_r(${1:int fd}, ${2:char *buf}, ${3:size_t buflen})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>\nThe full and simple forms of the name with which the program was invoked. These variables are set up automatically at startup based on the value of argv[0]."
            },
            "filterText": "program_invocation_name",
            "insertText": "program_invocation_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_name",
            "score": 0.25669535994529724,
            "sortText": "417c926dprogram_invocation_name",
            "textEdit": {
               "newText": "program_invocation_name",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>"
            },
            "filterText": "program_invocation_short_name",
            "insertText": "program_invocation_short_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_short_name",
            "score": 0.25669535994529724,
            "sortText": "417c926dprogram_invocation_short_name",
            "textEdit": {
               "newText": "program_invocation_short_name",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__PRETTY_FUNCTION__",
            "insertText": "__PRETTY_FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__PRETTY_FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "41a9a1f8__PRETTY_FUNCTION__",
            "textEdit": {
               "newText": "__PRETTY_FUNCTION__",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_DEFAULT_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_DEFAULT_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_DEFAULT_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_READER_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_READER_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_READER_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_PREFER_READER_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_READER_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41dd8987obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_INHERIT",
            "insertText": "PTHREAD_PRIO_INHERIT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_INHERIT",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PRIO_INHERIT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_INHERIT",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_NONE",
            "insertText": "PTHREAD_PRIO_NONE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_NONE",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PRIO_NONE",
            "textEdit": {
               "newText": "PTHREAD_PRIO_NONE",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_PROTECT",
            "insertText": "PTHREAD_PRIO_PROTECT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_PROTECT",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PRIO_PROTECT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_PROTECT",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_PRIVATE",
            "insertText": "PTHREAD_PROCESS_PRIVATE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_PRIVATE",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PROCESS_PRIVATE",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_PRIVATE",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_SHARED",
            "insertText": "PTHREAD_PROCESS_SHARED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_SHARED",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PROCESS_SHARED",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_SHARED",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:24:54.226] Failed to find compilation database for /home/was/a.cpp
I[09:24:54.459] <-- textDocument/signatureHelp(6546)

--- [09:24:54.454364] Send TabNine Complete Request: /home/was/a.cpp

--- [09:24:54.459537] Send (6546): textDocument/signatureHelp
I[09:24:54.582] ASTWorker building file /home/was/a.cpp version 4 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '())
Discard response: file changed since last request
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  pr",
         "after": "\n  return 0;\n}\n",
         "filename": "/home/was/a.cpp",
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
{
   "id": 6546,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 4
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}

--- [09:24:54.583987] Recv response clangd (35731): textDocument/completion
I[09:24:54.584] <-- textDocument/didChange

--- [09:24:54.590134] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 5
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 4
               },
               "end": {
                  "line": 5,
                  "character": 4
               }
            },
            "rangeLength": 0,
            "text": "i"
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:24:54.596] --> textDocument/publishDiagnostics
{
   "id": 35731,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": true,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "insertText": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "textEdit": {
               "newText": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ATTR_NO_SIGMASK_NP",
            "insertText": "PTHREAD_ATTR_NO_SIGMASK_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ATTR_NO_SIGMASK_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ATTR_NO_SIGMASK_NP",
            "textEdit": {
               "newText": "PTHREAD_ATTR_NO_SIGMASK_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_ASYNCHRONOUS",
            "insertText": "PTHREAD_CANCEL_ASYNCHRONOUS",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CANCEL_ASYNCHRONOUS",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CANCEL_ASYNCHRONOUS",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_ASYNCHRONOUS",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_DEFERRED",
            "insertText": "PTHREAD_CANCEL_DEFERRED",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CANCEL_DEFERRED",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CANCEL_DEFERRED",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_DEFERRED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_DISABLE",
            "insertText": "PTHREAD_CANCEL_DISABLE",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CANCEL_DISABLE",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CANCEL_DISABLE",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_DISABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_COND_INITIALIZER",
            "insertText": "PTHREAD_COND_INITIALIZER",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_COND_INITIALIZER",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_COND_INITIALIZER",
            "textEdit": {
               "newText": "PTHREAD_COND_INITIALIZER",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CREATE_JOINABLE",
            "insertText": "PTHREAD_CREATE_JOINABLE",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CREATE_JOINABLE",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CREATE_JOINABLE",
            "textEdit": {
               "newText": "PTHREAD_CREATE_JOINABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "insertText": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "textEdit": {
               "newText": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_INITIALIZER",
            "insertText": "PTHREAD_MUTEX_INITIALIZER",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_MUTEX_INITIALIZER",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_MUTEX_INITIALIZER",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_INITIALIZER",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ONCE_INIT",
            "insertText": "PTHREAD_ONCE_INIT",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ONCE_INIT",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ONCE_INIT",
            "textEdit": {
               "newText": "PTHREAD_ONCE_INIT",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_PRIVATE",
            "insertText": "PTHREAD_PROCESS_PRIVATE",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_PROCESS_PRIVATE",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_PROCESS_PRIVATE",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_PRIVATE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_SHARED",
            "insertText": "PTHREAD_PROCESS_SHARED",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_PROCESS_SHARED",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_PROCESS_SHARED",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_SHARED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "insertText": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "textEdit": {
               "newText": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_SCOPE_SYSTEM",
            "insertText": "PTHREAD_SCOPE_SYSTEM",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_SCOPE_SYSTEM",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_SCOPE_SYSTEM",
            "textEdit": {
               "newText": "PTHREAD_SCOPE_SYSTEM",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cleanup_pop",
            "insertText": "pthread_cleanup_pop(${1:execute})",
            "insertTextFormat": 2,
            "kind": 1,
            "label": "pthread_cleanup_pop(execute)",
            "score": 0.8430243730545044,
            "sortText": "40a82f8epthread_cleanup_pop",
            "textEdit": {
               "newText": "pthread_cleanup_pop(${1:execute})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cleanup_pop_restore_np",
            "insertText": "pthread_cleanup_pop_restore_np(${1:execute})",
            "insertTextFormat": 2,
            "kind": 1,
            "label": "pthread_cleanup_pop_restore_np(execute)",
            "score": 0.8430243730545044,
            "sortText": "40a82f8epthread_cleanup_pop_restore_np",
            "textEdit": {
               "newText": "pthread_cleanup_pop_restore_np(${1:execute})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cleanup_push",
            "insertText": "pthread_cleanup_push(${1:routine}, ${2:arg})",
            "insertTextFormat": 2,
            "kind": 1,
            "label": "pthread_cleanup_push(routine, arg)",
            "score": 0.8430243730545044,
            "sortText": "40a82f8epthread_cleanup_push",
            "textEdit": {
               "newText": "pthread_cleanup_push(${1:routine}, ${2:arg})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet bit set in CPUSET representing the processors threads created with ATTR can run on."
            },
            "filterText": "pthread_attr_getaffinity_np",
            "insertText": "pthread_attr_getaffinity_np(${1:const pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getaffinity_np(const pthread_attr_t *attr, size_t cpusetsize, cpu_set_t *cpuset)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getaffinity_np",
            "textEdit": {
               "newText": "pthread_attr_getaffinity_np(${1:const pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet detach state attribute."
            },
            "filterText": "pthread_attr_getdetachstate",
            "insertText": "pthread_attr_getdetachstate(${1:const pthread_attr_t *attr}, ${2:int *detachstate})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getdetachstate",
            "textEdit": {
               "newText": "pthread_attr_getdetachstate(${1:const pthread_attr_t *attr}, ${2:int *detachstate})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the size of the guard area created for stack overflow protection."
            },
            "filterText": "pthread_attr_getguardsize",
            "insertText": "pthread_attr_getguardsize(${1:const pthread_attr_t *attr}, ${2:size_t *guardsize})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getguardsize",
            "textEdit": {
               "newText": "pthread_attr_getguardsize(${1:const pthread_attr_t *attr}, ${2:size_t *guardsize})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *INHERIT the scheduling inheritance mode of *ATTR."
            },
            "filterText": "pthread_attr_getinheritsched",
            "insertText": "pthread_attr_getinheritsched(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict inherit})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getinheritsched(const pthread_attr_t *__restrict attr, int *__restrict inherit)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getinheritsched",
            "textEdit": {
               "newText": "pthread_attr_getinheritsched(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict inherit})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *SCOPE the scheduling contention scope of *ATTR."
            },
            "filterText": "pthread_attr_getscope",
            "insertText": "pthread_attr_getscope(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict scope})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getscope(const pthread_attr_t *__restrict attr, int *__restrict scope)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getscope",
            "textEdit": {
               "newText": "pthread_attr_getscope(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict scope})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn the previously set address for the stack."
            },
            "filterText": "pthread_attr_getstack",
            "insertText": "pthread_attr_getstack(${1:const pthread_attr_t *__restrict attr}, ${2:void **__restrict stackaddr}, ${3:size_t *__restrict stacksize})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getstack(const pthread_attr_t *__restrict attr, void **__restrict stackaddr, size_t *__restrict stacksize)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getstack",
            "textEdit": {
               "newText": "pthread_attr_getstack(${1:const pthread_attr_t *__restrict attr}, ${2:void **__restrict stackaddr}, ${3:size_t *__restrict stacksize})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn the currently used minimal stack size."
            },
            "filterText": "pthread_attr_getstacksize",
            "insertText": "pthread_attr_getstacksize(${1:const pthread_attr_t *__restrict attr}, ${2:size_t *__restrict stacksize})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getstacksize(const pthread_attr_t *__restrict attr, size_t *__restrict stacksize)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getstacksize",
            "textEdit": {
               "newText": "pthread_attr_getstacksize(${1:const pthread_attr_t *__restrict attr}, ${2:size_t *__restrict stacksize})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nThread created with attribute ATTR will be limited to run only on the processors represented in CPUSET."
            },
            "filterText": "pthread_attr_setaffinity_np",
            "insertText": "pthread_attr_setaffinity_np(${1:pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:const cpu_set_t *cpuset})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setaffinity_np(pthread_attr_t *attr, size_t cpusetsize, const cpu_set_t *cpuset)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setaffinity_np",
            "textEdit": {
               "newText": "pthread_attr_setaffinity_np(${1:pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:const cpu_set_t *cpuset})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet detach state attribute."
            },
            "filterText": "pthread_attr_setdetachstate",
            "insertText": "pthread_attr_setdetachstate(${1:pthread_attr_t *attr}, ${2:int detachstate})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setdetachstate",
            "textEdit": {
               "newText": "pthread_attr_setdetachstate(${1:pthread_attr_t *attr}, ${2:int detachstate})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet scheduling inheritance mode in *ATTR according to INHERIT."
            },
            "filterText": "pthread_attr_setinheritsched",
            "insertText": "pthread_attr_setinheritsched(${1:pthread_attr_t *attr}, ${2:int inherit})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setinheritsched(pthread_attr_t *attr, int inherit)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setinheritsched",
            "textEdit": {
               "newText": "pthread_attr_setinheritsched(${1:pthread_attr_t *attr}, ${2:int inherit})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet scheduling policy in *ATTR according to POLICY."
            },
            "filterText": "pthread_attr_setschedpolicy",
            "insertText": "pthread_attr_setschedpolicy(${1:pthread_attr_t *attr}, ${2:int policy})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setschedpolicy",
            "textEdit": {
               "newText": "pthread_attr_setschedpolicy(${1:pthread_attr_t *attr}, ${2:int policy})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet scheduling contention scope in *ATTR according to SCOPE."
            },
            "filterText": "pthread_attr_setscope",
            "insertText": "pthread_attr_setscope(${1:pthread_attr_t *attr}, ${2:int scope})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setscope(pthread_attr_t *attr, int scope)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setscope",
            "textEdit": {
               "newText": "pthread_attr_setscope(${1:pthread_attr_t *attr}, ${2:int scope})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nStore *SIGMASK as the signal mask for the new thread in *ATTR."
            },
            "filterText": "pthread_attr_setsigmask_np",
            "insertText": "pthread_attr_setsigmask_np(${1:pthread_attr_t *attr}, ${2:const __sigset_t *sigmask})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setsigmask_np(pthread_attr_t *attr, const __sigset_t *sigmask)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setsigmask_np",
            "textEdit": {
               "newText": "pthread_attr_setsigmask_np(${1:pthread_attr_t *attr}, ${2:const __sigset_t *sigmask})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWait on barrier BARRIER."
            },
            "filterText": "pthread_barrier_wait",
            "insertText": "pthread_barrier_wait(${1:pthread_barrier_t *barrier})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_barrier_wait(pthread_barrier_t *barrier)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_barrier_wait",
            "textEdit": {
               "newText": "pthread_barrier_wait(${1:pthread_barrier_t *barrier})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy previously dynamically initialized barrier attribute ATTR."
            },
            "filterText": "pthread_barrierattr_destroy",
            "insertText": "pthread_barrierattr_destroy(${1:pthread_barrierattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_barrierattr_destroy(pthread_barrierattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_barrierattr_destroy",
            "textEdit": {
               "newText": "pthread_barrierattr_destroy(${1:pthread_barrierattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nMake calling thread wait for termination of the thread TH, but only until TIMEOUT measured against the clock specified by CLOCKID. The exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN is not NULL.\nThis function is a cancellation point and therefore not marked with __THROW."
            },
            "filterText": "pthread_clockjoin_np",
            "insertText": "pthread_clockjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:clockid_t clockid}, ${4:const struct timespec *abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_clockjoin_np(pthread_t th, void **thread_return, clockid_t clockid, const struct timespec *abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_clockjoin_np",
            "textEdit": {
               "newText": "pthread_clockjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:clockid_t clockid}, ${4:const struct timespec *abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWake up all threads waiting for condition variables COND."
            },
            "filterText": "pthread_cond_broadcast",
            "insertText": "pthread_cond_broadcast(${1:pthread_cond_t *cond})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_broadcast(pthread_cond_t *cond)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_broadcast",
            "textEdit": {
               "newText": "pthread_cond_broadcast(${1:pthread_cond_t *cond})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cond_clockwait",
            "insertText": "pthread_cond_clockwait(${1:pthread_cond_t *__restrict cond}, ${2:pthread_mutex_t *__restrict mutex}, ${3:__clockid_t clock_id}, ${4:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_clockwait(pthread_cond_t *__restrict cond, pthread_mutex_t *__restrict mutex, __clockid_t clock_id, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_clockwait",
            "textEdit": {
               "newText": "pthread_cond_clockwait(${1:pthread_cond_t *__restrict cond}, ${2:pthread_mutex_t *__restrict mutex}, ${3:__clockid_t clock_id}, ${4:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy condition variable COND."
            },
            "filterText": "pthread_cond_destroy",
            "insertText": "pthread_cond_destroy(${1:pthread_cond_t *cond})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_destroy(pthread_cond_t *cond)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_destroy",
            "textEdit": {
               "newText": "pthread_cond_destroy(${1:pthread_cond_t *cond})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWake up one thread waiting for condition variable COND."
            },
            "filterText": "pthread_cond_signal",
            "insertText": "pthread_cond_signal(${1:pthread_cond_t *cond})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_signal(pthread_cond_t *cond)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_signal",
            "textEdit": {
               "newText": "pthread_cond_signal(${1:pthread_cond_t *cond})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_destroy",
            "insertText": "pthread_condattr_destroy(${1:pthread_condattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_destroy(pthread_condattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_destroy",
            "textEdit": {
               "newText": "pthread_condattr_destroy(${1:pthread_condattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the clock selected for the condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_getclock",
            "insertText": "pthread_condattr_getclock(${1:const pthread_condattr_t *__restrict attr}, ${2:__clockid_t *__restrict clock_id})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_getclock(const pthread_condattr_t *__restrict attr, __clockid_t *__restrict clock_id)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_getclock",
            "textEdit": {
               "newText": "pthread_condattr_getclock(${1:const pthread_condattr_t *__restrict attr}, ${2:__clockid_t *__restrict clock_id})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the clock selected for the condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_setclock",
            "insertText": "pthread_condattr_setclock(${1:pthread_condattr_t *attr}, ${2:__clockid_t clock_id})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_setclock(pthread_condattr_t *attr, __clockid_t clock_id)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_setclock",
            "textEdit": {
               "newText": "pthread_condattr_setclock(${1:pthread_condattr_t *attr}, ${2:__clockid_t clock_id})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the process-shared flag of the condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_setpshared",
            "insertText": "pthread_condattr_setpshared(${1:pthread_condattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_setpshared",
            "textEdit": {
               "newText": "pthread_condattr_setpshared(${1:pthread_condattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nCreate a new thread, starting with execution of START-ROUTINE getting passed ARG. Creation attributed come from ATTR. The new handle is stored in *NEWTHREAD."
            },
            "filterText": "pthread_create",
            "insertText": "pthread_create(${1:pthread_t *__restrict newthread}, ${2:const pthread_attr_t *__restrict attr}, ${3:void *(*start_routine)(void *)}, ${4:void *__restrict arg})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_create(pthread_t *__restrict newthread, const pthread_attr_t *__restrict attr, void *(*start_routine)(void *), void *__restrict arg)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_create",
            "textEdit": {
               "newText": "pthread_create(${1:pthread_t *__restrict newthread}, ${2:const pthread_attr_t *__restrict attr}, ${3:void *(*start_routine)(void *)}, ${4:void *__restrict arg})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nIndicate that the thread TH is never to be joined with PTHREAD_JOIN.\nThe resources of TH will therefore be freed immediately when it terminates, instead of waiting for another thread to perform PTHREAD_JOIN on it."
            },
            "filterText": "pthread_detach",
            "insertText": "pthread_detach(${1:pthread_t th})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_detach(pthread_t th)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_detach",
            "textEdit": {
               "newText": "pthread_detach(${1:pthread_t th})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet bit set in CPUSET representing the processors TH can run on."
            },
            "filterText": "pthread_getaffinity_np",
            "insertText": "pthread_getaffinity_np(${1:pthread_t th}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getaffinity_np(pthread_t th, size_t cpusetsize, cpu_set_t *cpuset)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getaffinity_np",
            "textEdit": {
               "newText": "pthread_getaffinity_np(${1:pthread_t th}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the default attributes used by pthread_create in this process."
            },
            "filterText": "pthread_getattr_default_np",
            "insertText": "pthread_getattr_default_np(${1:pthread_attr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getattr_default_np(pthread_attr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getattr_default_np",
            "textEdit": {
               "newText": "pthread_getattr_default_np(${1:pthread_attr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize thread attribute *ATTR with attributes corresponding to the already running thread TH. It shall be called on uninitialized ATTR and destroyed with pthread_attr_destroy when no longer needed."
            },
            "filterText": "pthread_getattr_np",
            "insertText": "pthread_getattr_np(${1:pthread_t th}, ${2:pthread_attr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getattr_np(pthread_t th, pthread_attr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getattr_np",
            "textEdit": {
               "newText": "pthread_getattr_np(${1:pthread_t th}, ${2:pthread_attr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet ID of CPU-time clock for thread THREAD_ID."
            },
            "filterText": "pthread_getcpuclockid",
            "insertText": "pthread_getcpuclockid(${1:pthread_t thread_id}, ${2:__clockid_t *clock_id})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getcpuclockid(pthread_t thread_id, __clockid_t *clock_id)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getcpuclockid",
            "textEdit": {
               "newText": "pthread_getcpuclockid(${1:pthread_t thread_id}, ${2:__clockid_t *clock_id})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "void *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current value of the thread-specific data slot identified by KEY."
            },
            "filterText": "pthread_getspecific",
            "insertText": "pthread_getspecific(${1:pthread_key_t key})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getspecific(pthread_key_t key)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getspecific",
            "textEdit": {
               "newText": "pthread_getspecific(${1:pthread_key_t key})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nMake calling thread wait for termination of the thread TH. The exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN is not NULL.\nThis function is a cancellation point and therefore not marked with __THROW."
            },
            "filterText": "pthread_join",
            "insertText": "pthread_join(${1:pthread_t th}, ${2:void **thread_return})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_join(pthread_t th, void **thread_return)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_join",
            "textEdit": {
               "newText": "pthread_join(${1:pthread_t th}, ${2:void **thread_return})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nCreate a key value identifying a location in the thread-specific data area. Each thread maintains a distinct thread-specific data area. DESTR_FUNCTION, if non-NULL, is called with the value associated to that key when the key is destroyed.\nDESTR_FUNCTION is not called if the value associated is NULL when the key is destroyed."
            },
            "filterText": "pthread_key_create",
            "insertText": "pthread_key_create(${1:pthread_key_t *key}, ${2:void (*destr_function)(void *)})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_key_create(pthread_key_t *key, void (*destr_function)(void *))",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_key_create",
            "textEdit": {
               "newText": "pthread_key_create(${1:pthread_key_t *key}, ${2:void (*destr_function)(void *)})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy KEY."
            },
            "filterText": "pthread_key_delete",
            "insertText": "pthread_key_delete(${1:pthread_key_t key})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_key_delete(pthread_key_t key)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_key_delete",
            "textEdit": {
               "newText": "pthread_key_delete(${1:pthread_key_t key})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy a mutex."
            },
            "filterText": "pthread_mutex_destroy",
            "insertText": "pthread_mutex_destroy(${1:pthread_mutex_t *mutex})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_destroy(pthread_mutex_t *mutex)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutex_destroy",
            "textEdit": {
               "newText": "pthread_mutex_destroy(${1:pthread_mutex_t *mutex})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize a mutex."
            },
            "filterText": "pthread_mutex_init",
            "insertText": "pthread_mutex_init(${1:pthread_mutex_t *mutex}, ${2:const pthread_mutexattr_t *mutexattr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutex_init",
            "textEdit": {
               "newText": "pthread_mutex_init(${1:pthread_mutex_t *mutex}, ${2:const pthread_mutexattr_t *mutexattr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nLock a mutex."
            },
            "filterText": "pthread_mutex_lock",
            "insertText": "pthread_mutex_lock(${1:pthread_mutex_t *mutex})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_lock(pthread_mutex_t *mutex)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutex_lock",
            "textEdit": {
               "newText": "pthread_mutex_lock(${1:pthread_mutex_t *mutex})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy mutex attribute object ATTR."
            },
            "filterText": "pthread_mutexattr_destroy",
            "insertText": "pthread_mutexattr_destroy(${1:pthread_mutexattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_destroy(pthread_mutexattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_destroy",
            "textEdit": {
               "newText": "pthread_mutexattr_destroy(${1:pthread_mutexattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *PROTOCOL the mutex protocol attribute in *ATTR."
            },
            "filterText": "pthread_mutexattr_getprotocol",
            "insertText": "pthread_mutexattr_getprotocol(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict protocol})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict attr, int *__restrict protocol)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_getprotocol",
            "textEdit": {
               "newText": "pthread_mutexattr_getprotocol(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict protocol})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the robustness flag of the mutex attribute ATTR."
            },
            "filterText": "pthread_mutexattr_getrobust",
            "insertText": "pthread_mutexattr_getrobust(${1:const pthread_mutexattr_t *attr}, ${2:int *robustness})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_getrobust(const pthread_mutexattr_t *attr, int *robustness)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_getrobust",
            "textEdit": {
               "newText": "pthread_mutexattr_getrobust(${1:const pthread_mutexattr_t *attr}, ${2:int *robustness})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *KIND the mutex kind attribute in *ATTR."
            },
            "filterText": "pthread_mutexattr_gettype",
            "insertText": "pthread_mutexattr_gettype(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict kind})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict attr, int *__restrict kind)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_gettype",
            "textEdit": {
               "newText": "pthread_mutexattr_gettype(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict kind})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize mutex attribute object ATTR with default attributes (kind is PTHREAD_MUTEX_TIMED_NP)."
            },
            "filterText": "pthread_mutexattr_init",
            "insertText": "pthread_mutexattr_init(${1:pthread_mutexattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_init(pthread_mutexattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_init",
            "textEdit": {
               "newText": "pthread_mutexattr_init(${1:pthread_mutexattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the process-shared flag of the mutex attribute ATTR."
            },
            "filterText": "pthread_mutexattr_setpshared",
            "insertText": "pthread_mutexattr_setpshared(${1:pthread_mutexattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_setpshared",
            "textEdit": {
               "newText": "pthread_mutexattr_setpshared(${1:pthread_mutexattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the mutex kind attribute in *ATTR to KIND (either PTHREAD_MUTEX_NORMAL,\nPTHREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_ERRORCHECK, or PTHREAD_MUTEX_DEFAULT)."
            },
            "filterText": "pthread_mutexattr_settype",
            "insertText": "pthread_mutexattr_settype(${1:pthread_mutexattr_t *attr}, ${2:int kind})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_settype(pthread_mutexattr_t *attr, int kind)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_settype",
            "textEdit": {
               "newText": "pthread_mutexattr_settype(${1:pthread_mutexattr_t *attr}, ${2:int kind})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGuarantee that the initialization function INIT_ROUTINE will be called only once, even if pthread_once is executed several times with the same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or extern variable initialized to PTHREAD_ONCE_INIT.\nThe initialization functions might throw exception which is why this function is not marked with __THROW."
            },
            "filterText": "pthread_once",
            "insertText": "pthread_once(${1:pthread_once_t *once_control}, ${2:void (*init_routine)()})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_once(pthread_once_t *once_control, void (*init_routine)())",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_once",
            "textEdit": {
               "newText": "pthread_once(${1:pthread_once_t *once_control}, ${2:void (*init_routine)()})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockrdlock",
            "insertText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_clockrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockwrlock",
            "insertText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_clockwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nAcquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_rdlock",
            "insertText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_rdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_rdlock",
            "textEdit": {
               "newText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedrdlock",
            "insertText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_timedrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedwrlock",
            "insertText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_timedwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to acquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_tryrdlock",
            "insertText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_tryrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current setting of reader/writer preference."
            },
            "filterText": "pthread_rwlockattr_getkind_np",
            "insertText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict attr, int *__restrict pref)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_getkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet reader/write preference."
            },
            "filterText": "pthread_rwlockattr_setkind_np",
            "insertText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *attr, int pref)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_setkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet process-shared attribute of ATTR to PSHARED."
            },
            "filterText": "pthread_rwlockattr_setpshared",
            "insertText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_setpshared",
            "textEdit": {
               "newText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the default attributes to be used by pthread_create in this process."
            },
            "filterText": "pthread_setattr_default_np",
            "insertText": "pthread_setattr_default_np(${1:const pthread_attr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setattr_default_np(const pthread_attr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setattr_default_np",
            "textEdit": {
               "newText": "pthread_setattr_default_np(${1:const pthread_attr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet cancellation state of current thread to TYPE, returning the old type in *OLDTYPE if OLDTYPE is not NULL."
            },
            "filterText": "pthread_setcanceltype",
            "insertText": "pthread_setcanceltype(${1:int type}, ${2:int *oldtype})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setcanceltype(int type, int *oldtype)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setcanceltype",
            "textEdit": {
               "newText": "pthread_setcanceltype(${1:int type}, ${2:int *oldtype})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet new concurrency level to LEVEL."
            },
            "filterText": "pthread_setconcurrency",
            "insertText": "pthread_setconcurrency(${1:int level})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setconcurrency(int level)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setconcurrency",
            "textEdit": {
               "newText": "pthread_setconcurrency(${1:int level})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet thread name visible in the kernel and its interfaces."
            },
            "filterText": "pthread_setname_np",
            "insertText": "pthread_setname_np(${1:pthread_t target_thread}, ${2:const char *name})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setname_np(pthread_t target_thread, const char *name)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setname_np",
            "textEdit": {
               "newText": "pthread_setname_np(${1:pthread_t target_thread}, ${2:const char *name})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the scheduling priority for TARGET_THREAD."
            },
            "filterText": "pthread_setschedprio",
            "insertText": "pthread_setschedprio(${1:pthread_t target_thread}, ${2:int prio})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setschedprio(pthread_t target_thread, int prio)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setschedprio",
            "textEdit": {
               "newText": "pthread_setschedprio(${1:pthread_t target_thread}, ${2:int prio})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize the spinlock LOCK. If PSHARED is nonzero the spinlock can be shared between different processes."
            },
            "filterText": "pthread_spin_init",
            "insertText": "pthread_spin_init(${1:pthread_spinlock_t *lock}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_init(pthread_spinlock_t *lock, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_init",
            "textEdit": {
               "newText": "pthread_spin_init(${1:pthread_spinlock_t *lock}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWait until spinlock LOCK is retrieved."
            },
            "filterText": "pthread_spin_lock",
            "insertText": "pthread_spin_lock(${1:pthread_spinlock_t *lock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_lock(pthread_spinlock_t *lock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_lock",
            "textEdit": {
               "newText": "pthread_spin_lock(${1:pthread_spinlock_t *lock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to lock spinlock LOCK."
            },
            "filterText": "pthread_spin_trylock",
            "insertText": "pthread_spin_trylock(${1:pthread_spinlock_t *lock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_trylock(pthread_spinlock_t *lock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_trylock",
            "textEdit": {
               "newText": "pthread_spin_trylock(${1:pthread_spinlock_t *lock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nRelease spinlock LOCK."
            },
            "filterText": "pthread_spin_unlock",
            "insertText": "pthread_spin_unlock(${1:pthread_spinlock_t *lock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_unlock(pthread_spinlock_t *lock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_unlock",
            "textEdit": {
               "newText": "pthread_spin_unlock(${1:pthread_spinlock_t *lock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nMake calling thread wait for termination of the thread TH, but only until TIMEOUT. The exit status of the thread is stored in THREAD_RETURN, if THREAD_RETURN is not NULL.\nThis function is a cancellation point and therefore not marked with __THROW."
            },
            "filterText": "pthread_timedjoin_np",
            "insertText": "pthread_timedjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:const struct timespec *abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_timedjoin_np(pthread_t th, void **thread_return, const struct timespec *abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_timedjoin_np",
            "textEdit": {
               "newText": "pthread_timedjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:const struct timespec *abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "deprecated": true,
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the starting address of the stack of the thread to be created.\nDepending on whether the stack grows up or down the value must either be higher or lower than all the address in the memory block. The minimal size of the block must be PTHREAD_STACK_MIN."
            },
            "filterText": "pthread_attr_setstackaddr",
            "insertText": "pthread_attr_setstackaddr(${1:pthread_attr_t *attr}, ${2:void *stackaddr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr)",
            "score": 0.332123339176178,
            "sortText": "4155f3eepthread_attr_setstackaddr",
            "textEdit": {
               "newText": "pthread_attr_setstackaddr(${1:pthread_attr_t *attr}, ${2:void *stackaddr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "deprecated": true,
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_mutex_consistent_np",
            "insertText": "pthread_mutex_consistent_np(${1:pthread_mutex_t *})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_consistent_np(pthread_mutex_t *)",
            "score": 0.332123339176178,
            "sortText": "4155f3eepthread_mutex_consistent_np",
            "textEdit": {
               "newText": "pthread_mutex_consistent_np(${1:pthread_mutex_t *})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "deprecated": true,
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_mutexattr_setrobust_np",
            "insertText": "pthread_mutexattr_setrobust_np(${1:pthread_mutexattr_t *}, ${2:int})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int)",
            "score": 0.332123339176178,
            "sortText": "4155f3eepthread_mutexattr_setrobust_np",
            "textEdit": {
               "newText": "pthread_mutexattr_setrobust_np(${1:pthread_mutexattr_t *}, ${2:int})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_DISABLE",
            "insertText": "PTHREAD_CANCEL_DISABLE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CANCEL_DISABLE",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CANCEL_DISABLE",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_DISABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_ENABLE",
            "insertText": "PTHREAD_CANCEL_ENABLE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CANCEL_ENABLE",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CANCEL_ENABLE",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_ENABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CREATE_DETACHED",
            "insertText": "PTHREAD_CREATE_DETACHED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CREATE_DETACHED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CREATE_DETACHED",
            "textEdit": {
               "newText": "PTHREAD_CREATE_DETACHED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CREATE_JOINABLE",
            "insertText": "PTHREAD_CREATE_JOINABLE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CREATE_JOINABLE",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CREATE_JOINABLE",
            "textEdit": {
               "newText": "PTHREAD_CREATE_JOINABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_EXPLICIT_SCHED",
            "insertText": "PTHREAD_EXPLICIT_SCHED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_EXPLICIT_SCHED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_EXPLICIT_SCHED",
            "textEdit": {
               "newText": "PTHREAD_EXPLICIT_SCHED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_INHERIT_SCHED",
            "insertText": "PTHREAD_INHERIT_SCHED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_INHERIT_SCHED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_INHERIT_SCHED",
            "textEdit": {
               "newText": "PTHREAD_INHERIT_SCHED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_ERRORCHECK_NP",
            "insertText": "PTHREAD_MUTEX_ERRORCHECK_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_ERRORCHECK_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_ERRORCHECK_NP",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_ERRORCHECK_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_ROBUST",
            "insertText": "PTHREAD_MUTEX_ROBUST",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_ROBUST",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_ROBUST",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_ROBUST",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_STALLED",
            "insertText": "PTHREAD_MUTEX_STALLED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_STALLED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_STALLED",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_STALLED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_STALLED_NP",
            "insertText": "PTHREAD_MUTEX_STALLED_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_STALLED_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_STALLED_NP",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_STALLED_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_TIMED_NP",
            "insertText": "PTHREAD_MUTEX_TIMED_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_TIMED_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_TIMED_NP",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_TIMED_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_SHARED",
            "insertText": "PTHREAD_PROCESS_SHARED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_SHARED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_PROCESS_SHARED",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_SHARED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_DEFAULT_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_RWLOCK_DEFAULT_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_DEFAULT_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_RWLOCK_PREFER_WRITER_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_SCOPE_PROCESS",
            "insertText": "PTHREAD_SCOPE_PROCESS",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_SCOPE_PROCESS",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_SCOPE_PROCESS",
            "textEdit": {
               "newText": "PTHREAD_SCOPE_PROCESS",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:24:54.617] --> reply:textDocument/signatureHelp(6546) 157 ms
I[09:24:54.635] Failed to find compilation database for /home/was/a.cpp
I[09:24:54.650] <-- textDocument/completion(59800)

--- [09:24:54.650773] Send (59800): textDocument/completion
I[09:24:56.032] Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '())
ASTWorker building file /home/was/a.cpp version 5 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp

--- [09:24:55.182199] Send TabNine Complete Request: /home/was/a.cpp
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '())
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '())
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '())
Discard outdated response: received=35731, latest=58800
{
   "id": 59800,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 5
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  prin",
         "after": "\n  return 0;\n}\n",
         "filename": "/home/was/a.cpp",
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
I[09:24:56.034] <-- textDocument/didChange
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '())

--- [09:24:56.034280] Recv notification: textDocument/publishDiagnostics

--- [09:24:56.034650] Send TabNine Complete Request: /home/was/a.cpp

--- [09:24:56.035245] Send (notification): textDocument/didChange
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use",
            "message": "Use of undeclared identifier 'pr'",
            "range": {
               "end": {
                  "character": 4,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 4
   }
}
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  print",
         "after": "\n  return 0;\n}\n",
         "filename": "/home/was/a.cpp",
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 6
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 5
               },
               "end": {
                  "line": 5,
                  "character": 5
               }
            },
            "rangeLength": 0,
            "text": "n"
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:24:56.036] <-- textDocument/completion(10979)

--- [09:24:56.035973] Recv response clangd (6546): textDocument/signatureHelp

--- [09:24:56.036262] Send (10979): textDocument/completion
{
   "id": 6546,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
{
   "id": 10979,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 6
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:56.036] <-- textDocument/signatureHelp(38697)
Discard outdated response: received=6546, latest=32568

--- [09:24:56.036622] Send (38697): textDocument/signatureHelp
{
   "id": 38697,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 6
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}

--- [09:24:56.036830] Send (notification): textDocument/didChange
I[09:24:56.036] <-- textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 7
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 6
               },
               "end": {
                  "line": 5,
                  "character": 6
               }
            },
            "rangeLength": 0,
            "text": "t"
         }
      ]
   },
   "jsonrpc": "2.0"
}

--- [09:24:56.037031] Send (58800): textDocument/completion
{
   "id": 58800,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 7
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}

--- [09:24:56.037164] Send (32568): textDocument/signatureHelp
{
   "id": 32568,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 7
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:56.037] <-- textDocument/completion(58800)

--- [09:24:56.037338] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 8
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 7
               },
               "end": {
                  "line": 5,
                  "character": 7
               }
            },
            "rangeLength": 0,
            "text": "f"
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:24:56.037] <-- textDocument/signatureHelp(32568)
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '((:key "printf(\"" :icon "tabnine" :label "printf(\"" :display-label "printf(\"" :annotation "57%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage" :icon "tabnine" :label "printf(\"Usage" :display-label "printf(\"Usage" :annotation " 7%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage:" :icon "tabnine" :label "printf(\"Usage:" :display-label "printf(\"Usage:" :annotation " 6%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage: %" :icon "tabnine" :label "printf(\"Usage: %" :display-label "printf(\"Usage: %" :annotation " 3%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage: %s" :icon "tabnine" :label "printf(\"Usage: %s" :display-label "printf(\"Usage: %s" :annotation " 2%" :backend "tabnine" :new_suffix "\")" :old_suffix "")))
I[09:24:56.039] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:56.065] <-- textDocument/didChange
I[09:24:56.041] --> textDocument/publishDiagnostics
I[09:24:56.042] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:56.043] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:56.053] --> reply:textDocument/signatureHelp(38697) 16 ms
I[09:24:56.066] Code complete: 0 results from Sema, 13 from Index, 0 matched, 0 from identifiers, 13 returned.
I[09:24:56.066] Code complete: 0 results from Sema, 9 from Index, 0 matched, 0 from identifiers, 9 returned.
I[09:24:56.066] Code complete: 0 results from Sema, 3 from Index, 0 matched, 0 from identifiers, 3 returned.

--- [09:24:56.066325] Recv notification: textDocument/publishDiagnostics
I[09:24:56.066] --> reply:textDocument/completion(58800) 29 ms
I[09:24:56.066] --> reply:textDocument/completion(10979) 30 ms
I[09:24:56.066] --> reply:textDocument/completion(59800) 1415 ms
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use",
            "message": "Use of undeclared identifier 'pri'",
            "range": {
               "end": {
                  "character": 5,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 5
   }
}

--- [09:24:56.067624] Recv response clangd (38697): textDocument/signatureHelp
{
   "id": 38697,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
Discard outdated response: received=38697, latest=32568

--- [09:24:56.067765] Recv response clangd (58800): textDocument/completion
{
   "id": 58800,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 7,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "415d8987obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 7,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 7,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
Discard response: file changed since last request

--- [09:24:56.068034] Recv response clangd (10979): textDocument/completion
{
   "id": 10979,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize read-write lock RWLOCK using attributes ATTR, or use the default values if later is NULL."
            },
            "filterText": "pthread_rwlock_init",
            "insertText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_init(pthread_rwlock_t *__restrict rwlock, const pthread_rwlockattr_t *__restrict attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_init",
            "textEdit": {
               "newText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "416b1366obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>\nThe full and simple forms of the name with which the program was invoked. These variables are set up automatically at startup based on the value of argv[0]."
            },
            "filterText": "program_invocation_name",
            "insertText": "program_invocation_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_name",
            "score": 0.25669535994529724,
            "sortText": "419a003fprogram_invocation_name",
            "textEdit": {
               "newText": "program_invocation_name",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>"
            },
            "filterText": "program_invocation_short_name",
            "insertText": "program_invocation_short_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_short_name",
            "score": 0.25669535994529724,
            "sortText": "419a003fprogram_invocation_short_name",
            "textEdit": {
               "newText": "program_invocation_short_name",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_INHERIT",
            "insertText": "PTHREAD_PRIO_INHERIT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_INHERIT",
            "score": 0.25669535994529724,
            "sortText": "421a003fPTHREAD_PRIO_INHERIT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_INHERIT",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_NONE",
            "insertText": "PTHREAD_PRIO_NONE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_NONE",
            "score": 0.25669535994529724,
            "sortText": "421a003fPTHREAD_PRIO_NONE",
            "textEdit": {
               "newText": "PTHREAD_PRIO_NONE",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:24:56.082] --> reply:textDocument/signatureHelp(32568) 44 ms
I[09:24:56.112] <-- textDocument/completion(58836)
I[09:24:56.116] Failed to find compilation database for /home/was/a.cpp

--- [09:24:56.112396] Send (58836): textDocument/completion
I[09:24:56.157] Discard outdated response: received=10979, latest=58836
ASTWorker building file /home/was/a.cpp version 8 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
{
   "id": 58836,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 8
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}

--- [09:24:56.158056] Recv response clangd (59800): textDocument/completion
{
   "id": 59800,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize read-write lock RWLOCK using attributes ATTR, or use the default values if later is NULL."
            },
            "filterText": "pthread_rwlock_init",
            "insertText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_init(pthread_rwlock_t *__restrict rwlock, const pthread_rwlockattr_t *__restrict attr)",
            "score": 0.423080176115036,
            "sortText": "416f96b0pthread_rwlock_init",
            "textEdit": {
               "newText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "416f96b0pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "418347b4obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>\nThe full and simple forms of the name with which the program was invoked. These variables are set up automatically at startup based on the value of argv[0]."
            },
            "filterText": "program_invocation_name",
            "insertText": "program_invocation_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_name",
            "score": 0.25669535994529724,
            "sortText": "41a4f40aprogram_invocation_name",
            "textEdit": {
               "newText": "program_invocation_name",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>"
            },
            "filterText": "program_invocation_short_name",
            "insertText": "program_invocation_short_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_short_name",
            "score": 0.25669535994529724,
            "sortText": "41a4f40aprogram_invocation_short_name",
            "textEdit": {
               "newText": "program_invocation_short_name",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sched.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <sched.h>\nGet maximum priority value for a scheduler."
            },
            "filterText": "sched_get_priority_max",
            "insertText": "sched_get_priority_max(${1:int algorithm})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "sched_get_priority_max(int algorithm)",
            "score": 0.423080176115036,
            "sortText": "41a76209sched_get_priority_max",
            "textEdit": {
               "newText": "sched_get_priority_max(${1:int algorithm})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sched.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <sched.h>\nGet minimum priority value for a scheduler."
            },
            "filterText": "sched_get_priority_min",
            "insertText": "sched_get_priority_min(${1:int algorithm})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "sched_get_priority_min(int algorithm)",
            "score": 0.423080176115036,
            "sortText": "41a76209sched_get_priority_min",
            "textEdit": {
               "newText": "sched_get_priority_min(${1:int algorithm})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_INHERIT",
            "insertText": "PTHREAD_PRIO_INHERIT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_INHERIT",
            "score": 0.25669535994529724,
            "sortText": "4224f40aPTHREAD_PRIO_INHERIT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_INHERIT",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_NONE",
            "insertText": "PTHREAD_PRIO_NONE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_NONE",
            "score": 0.25669535994529724,
            "sortText": "4224f40aPTHREAD_PRIO_NONE",
            "textEdit": {
               "newText": "PTHREAD_PRIO_NONE",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_PROTECT",
            "insertText": "PTHREAD_PRIO_PROTECT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_PROTECT",
            "score": 0.25669535994529724,
            "sortText": "4224f40aPTHREAD_PRIO_PROTECT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_PROTECT",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_PRIVATE",
            "insertText": "PTHREAD_PROCESS_PRIVATE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_PRIVATE",
            "score": 0.25669535994529724,
            "sortText": "4250c33cPTHREAD_PROCESS_PRIVATE",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_PRIVATE",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:24:56.163] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:24:56.163] --> textDocument/publishDiagnostics
Discard outdated response: received=59800, latest=58836

--- [09:24:56.369335] Recv response clangd (32568): textDocument/signatureHelp
I[09:24:56.369] Code complete: 1 results from Sema, 3 from Index, 1 matched, 0 from identifiers, 3 returned.
{
   "id": 32568,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
I[09:24:56.370] --> reply:textDocument/completion(58836) 257 ms
Discard response: file changed since last request

--- [09:24:56.370482] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "expected_semi_after_expr",
            "message": "Expected ';' after expression (fix available)",
            "range": {
               "end": {
                  "character": 8,
                  "line": 6
               },
               "start": {
                  "character": 2,
                  "line": 6
               }
            },
            "severity": 1,
            "source": "clang"
         },
         {
            "code": "-Wunused-value",
            "message": "Expression result unused",
            "range": {
               "end": {
                  "character": 8,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 2,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 8
   }
}

--- [09:24:56.371899] Recv response clangd (58836): textDocument/completion
{
   "id": 58836,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 1.302816390991211,
            "sortText": "3fd93d50printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 8,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "40fe8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 8,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "415482f2obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 8,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}

--- [09:24:56.483522] Completion items number: 2
Eval in Emacs: (lsp-bridge-completion--record-items '"/home/was/a.cpp" '((:key "0,printf(const char *__restrict format, ...)" :icon "function" :label "printf(const char *__restrict format, ...)" :display-label "printf(const char *__restrict format, ...)" :deprecated () :insertText "printf(${1:const char *__restrict format, ...})" :insertTextFormat 2 :textEdit (:newText "printf(${1:const char *__restrict format, ...})" :range (:end (:character 8 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "1,printf" :icon "reference" :label "printf" :display-label "printf" :deprecated () :insertText "printf" :insertTextFormat 1 :textEdit (:newText "printf" :range (:end (:character 8 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))))) '(:line 5 :character 8) '"clangd" '("." "<" ">" ":" "\"" "/" "*") '("clangd"))

--- [09:24:56.510515] Send TabNine Complete Request: /home/was/a.cpp
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  printf",
         "after": "\n  return 0;\n}\n",
         "filename": "/home/was/a.cpp",
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
Eval in Emacs: (lsp-bridge-completion-item--update '(:filepath "/home/was/a.cpp" :key "0,printf(const char *__restrict format, ...)" :server "clangd" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))) :documentation "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."))
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '((:key "printf(\"" :icon "tabnine" :label "printf(\"" :display-label "printf(\"" :annotation "36%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage" :icon "tabnine" :label "printf(\"Usage" :display-label "printf(\"Usage" :annotation " 5%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage:" :icon "tabnine" :label "printf(\"Usage:" :display-label "printf(\"Usage:" :annotation " 4%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage: %s" :icon "tabnine" :label "printf(\"Usage: %s" :display-label "printf(\"Usage: %s" :annotation " 2%" :backend "tabnine" :new_suffix "\")" :old_suffix "") (:key "printf(\"Usage: %" :icon "tabnine" :label "printf(\"Usage: %" :display-label "printf(\"Usage: %" :annotation " 2%" :backend "tabnine" :new_suffix "\")" :old_suffix "")))
I[09:24:56.537] <-- textDocument/signatureHelp(50294)

--- [09:24:56.537765] Send (50294): textDocument/signatureHelp
{
   "id": 50294,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 8
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:24:56.552] --> reply:textDocument/signatureHelp(50294) 14 ms

--- [09:24:56.552288] Recv response clangd (50294): textDocument/signatureHelp
{
   "id": 50294,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
Eval in Emacs: (lsp-bridge-diagnostic--render '"/home/was/a.cpp" '((:code "-Wunused-value" :message "Expression result unused" :range (:end (:character 8 :line 5) :start (:character 2 :line 5)) :severity 2 :source "clang") (:code "expected_semi_after_expr" :message "Expected ';' after expression (fix available)" :range (:end (:character 8 :line 6) :start (:character 2 :line 6)) :severity 1 :source "clang")))

--- [09:24:57.249251] Send TabNine Complete Request: []
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW.",
         "after": "",
         "filename": [],
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '())
Eval in Emacs: (lsp-bridge-completion-item--update '(:filepath "/home/was/a.cpp" :key "1,printf" :server "clangd" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))) :documentation "From <cstdio>"))

--- [09:25:00.469405] Send TabNine Complete Request: []
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW.",
         "after": "",
         "filename": [],
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '())
I[09:25:00.481] <-- textDocument/signatureHelp(42735)

--- [09:25:00.481774] Send (42735): textDocument/signatureHelp
{
   "id": 42735,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 8
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:00.527] --> reply:textDocument/signatureHelp(42735) 45 ms

--- [09:25:00.528059] Recv response clangd (42735): textDocument/signatureHelp
{
   "id": 42735,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
I[09:25:00.719] <-- textDocument/didChange

--- [09:25:00.719801] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 9
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 7
               },
               "end": {
                  "line": 5,
                  "character": 8
               }
            },
            "rangeLength": 1,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '("printf"))
I[09:25:00.770] Failed to find compilation database for /home/was/a.cpp
I[09:25:00.770] ASTWorker building file /home/was/a.cpp version 9 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
I[09:25:00.775] --> textDocument/publishDiagnostics

--- [09:25:00.775807] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use_suggest",
            "message": "Use of undeclared identifier 'print'; did you mean 'printf'? (fix available)\n\n/usr/include/stdio.h:356:12:\nnote: 'printf' declared here",
            "range": {
               "end": {
                  "character": 7,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         },
         {
            "code": "expected_semi_after_expr",
            "message": "Expected ';' after expression (fix available)",
            "range": {
               "end": {
                  "character": 8,
                  "line": 6
               },
               "start": {
                  "character": 2,
                  "line": 6
               }
            },
            "severity": 1,
            "source": "clang"
         },
         {
            "code": "-Wunused-value",
            "message": "Expression result unused",
            "range": {
               "end": {
                  "character": 7,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 2,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 9
   }
}
I[09:25:00.820] <-- textDocument/completion(62113
--- [09:25:00.820079] Send (62113): textDocument/completion
)
{
   "id": 62113,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 7
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:00.825] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:25:00.825] Code complete: 0 results from Sema, 3 from Index, 0 matched, 0 from identifiers, 3 returned.
I[09:25:00.825] --> reply:textDocument/completion(62113) 5 ms

--- [09:25:00.826216] Recv response clangd (62113): textDocument/completion
{
   "id": 62113,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 7,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "415d8987obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 7,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 7,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}

--- [09:25:00.826689] Completion items number: 2
Eval in Emacs: (lsp-bridge-completion--record-items '"/home/was/a.cpp" '((:key "0,printf(const char *__restrict format, ...)" :icon "function" :label "printf(const char *__restrict format, ...)" :display-label "printf(const char *__restrict format, ...)" :deprecated () :insertText "printf(${1:const char *__restrict format, ...})" :insertTextFormat 2 :textEdit (:newText "printf(${1:const char *__restrict format, ...})" :range (:end (:character 7 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "1,printf" :icon "reference" :label "printf" :display-label "printf" :deprecated () :insertText "printf" :insertTextFormat 1 :textEdit (:newText "printf" :range (:end (:character 7 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))))) '(:line 5 :character 7) '"clangd" '("." "<" ">" ":" "\"" "/" "*") '("clangd"))
Eval in Emacs: (lsp-bridge-completion-item--update '(:filepath "/home/was/a.cpp" :key "0,printf(const char *__restrict format, ...)" :server "clangd" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))) :documentation "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."))
I[09:25:00.933] <-- textDocument/didChange

--- [09:25:00.933928] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 10
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 6
               },
               "end": {
                  "line": 5,
                  "character": 7
               }
            },
            "rangeLength": 1,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '("printf"))
I[09:25:00.984] Failed to find compilation database for /home/was/a.cpp
I[09:25:00.984] ASTWorker building file /home/was/a.cpp version 10 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
I[09:25:00.999] --> textDocument/publishDiagnostics

--- [09:25:01.000060] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use",
            "message": "Use of undeclared identifier 'prin'",
            "range": {
               "end": {
                  "character": 6,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 10
   }
}
I[09:25:01.034] <-- textDocument/completion(7435
--- [09:25:01.034261] Send (7435): textDocument/completion
)
{
   "id": 7435,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 6
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:01.049] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:25:01.049] Code complete: 0 results from Sema, 9 from Index, 0 matched, 0 from identifiers, 9 returned.
I[09:25:01.050] --> reply:textDocument/completion(7435) 16 ms

--- [09:25:01.051899] Recv response clangd (7435): textDocument/completion
{
   "id": 7435,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize read-write lock RWLOCK using attributes ATTR, or use the default values if later is NULL."
            },
            "filterText": "pthread_rwlock_init",
            "insertText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_init(pthread_rwlock_t *__restrict rwlock, const pthread_rwlockattr_t *__restrict attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_init",
            "textEdit": {
               "newText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "416b1366obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>\nThe full and simple forms of the name with which the program was invoked. These variables are set up automatically at startup based on the value of argv[0]."
            },
            "filterText": "program_invocation_name",
            "insertText": "program_invocation_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_name",
            "score": 0.25669535994529724,
            "sortText": "419a003fprogram_invocation_name",
            "textEdit": {
               "newText": "program_invocation_name",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>"
            },
            "filterText": "program_invocation_short_name",
            "insertText": "program_invocation_short_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_short_name",
            "score": 0.25669535994529724,
            "sortText": "419a003fprogram_invocation_short_name",
            "textEdit": {
               "newText": "program_invocation_short_name",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_INHERIT",
            "insertText": "PTHREAD_PRIO_INHERIT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_INHERIT",
            "score": 0.25669535994529724,
            "sortText": "421a003fPTHREAD_PRIO_INHERIT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_INHERIT",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_NONE",
            "insertText": "PTHREAD_PRIO_NONE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_NONE",
            "score": 0.25669535994529724,
            "sortText": "421a003fPTHREAD_PRIO_NONE",
            "textEdit": {
               "newText": "PTHREAD_PRIO_NONE",
               "range": {
                  "end": {
                     "character": 6,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}

--- [09:25:01.063138] Completion items number: 2
Eval in Emacs: (lsp-bridge-completion--record-items '"/home/was/a.cpp" '((:key "0,printf(const char *__restrict format, ...)" :icon "function" :label "printf(const char *__restrict format, ...)" :display-label "printf(const char *__restrict format, ...)" :deprecated () :insertText "printf(${1:const char *__restrict format, ...})" :insertTextFormat 2 :textEdit (:newText "printf(${1:const char *__restrict format, ...})" :range (:end (:character 6 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "1,printf" :icon "reference" :label "printf" :display-label "printf" :deprecated () :insertText "printf" :insertTextFormat 1 :textEdit (:newText "printf" :range (:end (:character 6 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))))) '(:line 5 :character 6) '"clangd" '("." "<" ">" ":" "\"" "/" "*") '("clangd"))
Eval in Emacs: (lsp-bridge-completion-item--update '(:filepath "/home/was/a.cpp" :key "0,printf(const char *__restrict format, ...)" :server "clangd" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))) :documentation "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."))
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '("printf"))
I[09:25:01.133] <-- textDocument/didChange

--- [09:25:01.133938] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 11
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 5
               },
               "end": {
                  "line": 5,
                  "character": 6
               }
            },
            "rangeLength": 1,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:25:01.184] Failed to find compilation database for /home/was/a.cpp
I[09:25:01.184] ASTWorker building file /home/was/a.cpp version 11 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
I[09:25:01.204] --> textDocument/publishDiagnostics

--- [09:25:01.204813] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use",
            "message": "Use of undeclared identifier 'pri'",
            "range": {
               "end": {
                  "character": 5,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 11
   }
}
I[09:25:01.234] <-- textDocument/completion(40439)

--- [09:25:01.234347] Send (40439): textDocument/completion
{
   "id": 40439,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 5
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:01.248] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:25:01.248] Code complete: 0 results from Sema, 13 from Index, 0 matched, 0 from identifiers, 13 returned.
I[09:25:01.249] --> reply:textDocument/completion(40439) 15 ms

--- [09:25:01.250689] Recv response clangd (40439): textDocument/completion
{
   "id": 40439,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize read-write lock RWLOCK using attributes ATTR, or use the default values if later is NULL."
            },
            "filterText": "pthread_rwlock_init",
            "insertText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_init(pthread_rwlock_t *__restrict rwlock, const pthread_rwlockattr_t *__restrict attr)",
            "score": 0.423080176115036,
            "sortText": "416f96b0pthread_rwlock_init",
            "textEdit": {
               "newText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "416f96b0pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "418347b4obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>\nThe full and simple forms of the name with which the program was invoked. These variables are set up automatically at startup based on the value of argv[0]."
            },
            "filterText": "program_invocation_name",
            "insertText": "program_invocation_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_name",
            "score": 0.25669535994529724,
            "sortText": "41a4f40aprogram_invocation_name",
            "textEdit": {
               "newText": "program_invocation_name",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>"
            },
            "filterText": "program_invocation_short_name",
            "insertText": "program_invocation_short_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_short_name",
            "score": 0.25669535994529724,
            "sortText": "41a4f40aprogram_invocation_short_name",
            "textEdit": {
               "newText": "program_invocation_short_name",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sched.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <sched.h>\nGet maximum priority value for a scheduler."
            },
            "filterText": "sched_get_priority_max",
            "insertText": "sched_get_priority_max(${1:int algorithm})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "sched_get_priority_max(int algorithm)",
            "score": 0.423080176115036,
            "sortText": "41a76209sched_get_priority_max",
            "textEdit": {
               "newText": "sched_get_priority_max(${1:int algorithm})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sched.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <sched.h>\nGet minimum priority value for a scheduler."
            },
            "filterText": "sched_get_priority_min",
            "insertText": "sched_get_priority_min(${1:int algorithm})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "sched_get_priority_min(int algorithm)",
            "score": 0.423080176115036,
            "sortText": "41a76209sched_get_priority_min",
            "textEdit": {
               "newText": "sched_get_priority_min(${1:int algorithm})",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_INHERIT",
            "insertText": "PTHREAD_PRIO_INHERIT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_INHERIT",
            "score": 0.25669535994529724,
            "sortText": "4224f40aPTHREAD_PRIO_INHERIT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_INHERIT",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_NONE",
            "insertText": "PTHREAD_PRIO_NONE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_NONE",
            "score": 0.25669535994529724,
            "sortText": "4224f40aPTHREAD_PRIO_NONE",
            "textEdit": {
               "newText": "PTHREAD_PRIO_NONE",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_PROTECT",
            "insertText": "PTHREAD_PRIO_PROTECT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_PROTECT",
            "score": 0.25669535994529724,
            "sortText": "4224f40aPTHREAD_PRIO_PROTECT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_PROTECT",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_PRIVATE",
            "insertText": "PTHREAD_PROCESS_PRIVATE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_PRIVATE",
            "score": 0.25669535994529724,
            "sortText": "4250c33cPTHREAD_PROCESS_PRIVATE",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_PRIVATE",
               "range": {
                  "end": {
                     "character": 5,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}

--- [09:25:01.313628] Completion items number: 2
Eval in Emacs: (lsp-bridge-completion--record-items '"/home/was/a.cpp" '((:key "0,printf(const char *__restrict format, ...)" :icon "function" :label "printf(const char *__restrict format, ...)" :display-label "printf(const char *__restrict format, ...)" :deprecated () :insertText "printf(${1:const char *__restrict format, ...})" :insertTextFormat 2 :textEdit (:newText "printf(${1:const char *__restrict format, ...})" :range (:end (:character 5 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "1,printf" :icon "reference" :label "printf" :display-label "printf" :deprecated () :insertText "printf" :insertTextFormat 1 :textEdit (:newText "printf" :range (:end (:character 5 :line 5) :start (:character 2 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))))) '(:line 5 :character 5) '"clangd" '("." "<" ">" ":" "\"" "/" "*") '("clangd"))
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '("printf"))
I[09:25:01.333] <-- textDocument/didChange

--- [09:25:01.333223] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 12
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 4
               },
               "end": {
                  "line": 5,
                  "character": 5
               }
            },
            "rangeLength": 1,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:25:01.383] Failed to find compilation database for /home/was/a.cpp
I[09:25:01.383] ASTWorker building file /home/was/a.cpp version 12 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
I[09:25:01.388] --> textDocument/publishDiagnostics

--- [09:25:01.388653] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use",
            "message": "Use of undeclared identifier 'pr'",
            "range": {
               "end": {
                  "character": 4,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 12
   }
}
I[09:25:01.435] <-- textDocument/completion(21255)

--- [09:25:01.435014] Send (21255): textDocument/completion
{
   "id": 21255,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 4
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:01.450] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:25:01.450] Code complete: 1 results from Sema, 35 from Index, 0 matched, 0 from identifiers, 36 returned.
I[09:25:01.453] --> reply:textDocument/completion(21255) 18 ms

--- [09:25:01.456120] Recv response clangd (21255): textDocument/completion
{
   "id": 21255,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": false,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <iterator>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "BidirectionalIterator",
            "documentation": {
               "kind": "plaintext",
               "value": "From <iterator>"
            },
            "filterText": "prev",
            "insertText": "prev(${1:BidirectionalIterator x})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "prev(BidirectionalIterator x, typename iterator_traits<BidirectionalIterator>::difference_type n = 1)",
            "score": 0.5271619558334351,
            "sortText": "40f90beaprev",
            "textEdit": {
               "newText": "prev(${1:BidirectionalIterator x})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."
            },
            "filterText": "printf",
            "insertText": "printf(${1:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "printf(const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41276209printf",
            "textEdit": {
               "newText": "printf(${1:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nData structure for reader-writer lock variable handling. The structure of the attribute type is deliberately not exposed."
            },
            "filterText": "pthread_rwlock_t",
            "insertText": "pthread_rwlock_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "pthread_rwlock_t",
            "score": 0.5053281784057617,
            "sortText": "413df438pthread_rwlock_t",
            "textEdit": {
               "newText": "pthread_rwlock_t",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlockattr_t",
            "insertText": "pthread_rwlockattr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "pthread_rwlockattr_t",
            "score": 0.5053281784057617,
            "sortText": "413df438pthread_rwlockattr_t",
            "textEdit": {
               "newText": "pthread_rwlockattr_t",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockrdlock",
            "insertText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_clockrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockwrlock",
            "insertText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_clockwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy read-write lock RWLOCK."
            },
            "filterText": "pthread_rwlock_destroy",
            "insertText": "pthread_rwlock_destroy(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_destroy(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_destroy",
            "textEdit": {
               "newText": "pthread_rwlock_destroy(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize read-write lock RWLOCK using attributes ATTR, or use the default values if later is NULL."
            },
            "filterText": "pthread_rwlock_init",
            "insertText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_init(pthread_rwlock_t *__restrict rwlock, const pthread_rwlockattr_t *__restrict attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_init",
            "textEdit": {
               "newText": "pthread_rwlock_init(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const pthread_rwlockattr_t *__restrict attr})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nAcquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_rdlock",
            "insertText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_rdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_rdlock",
            "textEdit": {
               "newText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedrdlock",
            "insertText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_timedrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedwrlock",
            "insertText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_timedwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to acquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_tryrdlock",
            "insertText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_tryrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to acquire write lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_trywrlock",
            "insertText": "pthread_rwlock_trywrlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_trywrlock",
            "textEdit": {
               "newText": "pthread_rwlock_trywrlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nUnlock RWLOCK."
            },
            "filterText": "pthread_rwlock_unlock",
            "insertText": "pthread_rwlock_unlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_unlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_unlock",
            "textEdit": {
               "newText": "pthread_rwlock_unlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nAcquire write lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_wrlock",
            "insertText": "pthread_rwlock_wrlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_wrlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlock_wrlock",
            "textEdit": {
               "newText": "pthread_rwlock_wrlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy attribute object ATTR."
            },
            "filterText": "pthread_rwlockattr_destroy",
            "insertText": "pthread_rwlockattr_destroy(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_destroy",
            "textEdit": {
               "newText": "pthread_rwlockattr_destroy(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current setting of reader/writer preference."
            },
            "filterText": "pthread_rwlockattr_getkind_np",
            "insertText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict attr, int *__restrict pref)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_getkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current setting of process-shared attribute of ATTR in PSHARED."
            },
            "filterText": "pthread_rwlockattr_getpshared",
            "insertText": "pthread_rwlockattr_getpshared(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict attr, int *__restrict pshared)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_getpshared",
            "textEdit": {
               "newText": "pthread_rwlockattr_getpshared(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pshared})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet reader/write preference."
            },
            "filterText": "pthread_rwlockattr_setkind_np",
            "insertText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *attr, int pref)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_setkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet process-shared attribute of ATTR to PSHARED."
            },
            "filterText": "pthread_rwlockattr_setpshared",
            "insertText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "415d8987pthread_rwlockattr_setpshared",
            "textEdit": {
               "newText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdlib>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdlib>\nStore at most BUFLEN characters of the pathname of the slave pseudo terminal associated with the master FD is open on in BUF.\nReturn 0 on success, otherwise an error number."
            },
            "filterText": "ptsname_r",
            "insertText": "ptsname_r(${1:int fd}, ${2:char *buf}, ${3:size_t buflen})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "ptsname_r(int fd, char *buf, size_t buflen)",
            "score": 0.423080176115036,
            "sortText": "415d8987ptsname_r",
            "textEdit": {
               "newText": "ptsname_r(${1:int fd}, ${2:char *buf}, ${3:size_t buflen})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>\nThe full and simple forms of the name with which the program was invoked. These variables are set up automatically at startup based on the value of argv[0]."
            },
            "filterText": "program_invocation_name",
            "insertText": "program_invocation_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_name",
            "score": 0.25669535994529724,
            "sortText": "417c926dprogram_invocation_name",
            "textEdit": {
               "newText": "program_invocation_name",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cerrno>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "char *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cerrno>"
            },
            "filterText": "program_invocation_short_name",
            "insertText": "program_invocation_short_name",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "program_invocation_short_name",
            "score": 0.25669535994529724,
            "sortText": "417c926dprogram_invocation_short_name",
            "textEdit": {
               "newText": "program_invocation_short_name",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>"
            },
            "filterText": "printf",
            "insertText": "printf",
            "insertTextFormat": 1,
            "kind": 18,
            "label": "printf",
            "score": 0.25286611914634705,
            "sortText": "417e8855printf",
            "textEdit": {
               "newText": "printf",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__PRETTY_FUNCTION__",
            "insertText": "__PRETTY_FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__PRETTY_FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "41a9a1f8__PRETTY_FUNCTION__",
            "textEdit": {
               "newText": "__PRETTY_FUNCTION__",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_DEFAULT_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_DEFAULT_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_DEFAULT_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_READER_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_READER_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_READER_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_PREFER_READER_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_READER_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "score": 0.25669535994529724,
            "sortText": "41badba4PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cstdio>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <cstdio>\nWrite formatted output to an obstack."
            },
            "filterText": "obstack_printf",
            "insertText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "obstack_printf(struct obstack *__restrict obstack, const char *__restrict format, ...)",
            "score": 0.423080176115036,
            "sortText": "41dd8987obstack_printf",
            "textEdit": {
               "newText": "obstack_printf(${1:struct obstack *__restrict obstack}, ${2:const char *__restrict format, ...})",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_INHERIT",
            "insertText": "PTHREAD_PRIO_INHERIT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_INHERIT",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PRIO_INHERIT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_INHERIT",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_NONE",
            "insertText": "PTHREAD_PRIO_NONE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_NONE",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PRIO_NONE",
            "textEdit": {
               "newText": "PTHREAD_PRIO_NONE",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PRIO_PROTECT",
            "insertText": "PTHREAD_PRIO_PROTECT",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PRIO_PROTECT",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PRIO_PROTECT",
            "textEdit": {
               "newText": "PTHREAD_PRIO_PROTECT",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_PRIVATE",
            "insertText": "PTHREAD_PROCESS_PRIVATE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_PRIVATE",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PROCESS_PRIVATE",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_PRIVATE",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_SHARED",
            "insertText": "PTHREAD_PROCESS_SHARED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_SHARED",
            "score": 0.25669535994529724,
            "sortText": "427c926dPTHREAD_PROCESS_SHARED",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_SHARED",
               "range": {
                  "end": {
                     "character": 4,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:25:01.518] <-- textDocument/didChange
Eval in Emacs: (lsp-bridge-search-backend--record-items '"file-words" '("printf"))

--- [09:25:01.518569] Send (notification): textDocument/didChange
Discard outdated response: received=21255, latest=56076
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 13
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 3
               },
               "end": {
                  "line": 5,
                  "character": 4
               }
            },
            "rangeLength": 1,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}

--- [09:25:01.802849] Send (56076): textDocument/completion
I[09:25:01.802] <-- textDocument/completion(56076)
{
   "id": 56076,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 3
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:01.808] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
I[09:25:01.808] Code complete: 1 results from Sema, 100 from Index, 0 matched, 0 from identifiers, 100 returned (incomplete).
I[09:25:01.811] --> reply:textDocument/completion(56076) 8 ms
Eval in Emacs: (lsp-bridge-completion-item--update '(:filepath "/home/was/a.cpp" :key "0,printf(const char *__restrict format, ...)" :server "clangd" :additionalTextEdits ((:newText "#include <cstdio>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0)))) :documentation "From <cstdio>\nWrite formatted output to stdout.\nThis function is a possible cancellation point and therefore not marked with __THROW."))

--- [09:25:01.813378] Recv response clangd (56076): textDocument/completion
{
   "id": 56076,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": true,
      "items": [
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "insertText": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
            "textEdit": {
               "newText": "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ATTR_NO_SIGMASK_NP",
            "insertText": "PTHREAD_ATTR_NO_SIGMASK_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ATTR_NO_SIGMASK_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ATTR_NO_SIGMASK_NP",
            "textEdit": {
               "newText": "PTHREAD_ATTR_NO_SIGMASK_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_ASYNCHRONOUS",
            "insertText": "PTHREAD_CANCEL_ASYNCHRONOUS",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CANCEL_ASYNCHRONOUS",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CANCEL_ASYNCHRONOUS",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_ASYNCHRONOUS",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_DEFERRED",
            "insertText": "PTHREAD_CANCEL_DEFERRED",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CANCEL_DEFERRED",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CANCEL_DEFERRED",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_DEFERRED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_DISABLE",
            "insertText": "PTHREAD_CANCEL_DISABLE",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CANCEL_DISABLE",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CANCEL_DISABLE",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_DISABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_COND_INITIALIZER",
            "insertText": "PTHREAD_COND_INITIALIZER",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_COND_INITIALIZER",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_COND_INITIALIZER",
            "textEdit": {
               "newText": "PTHREAD_COND_INITIALIZER",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CREATE_JOINABLE",
            "insertText": "PTHREAD_CREATE_JOINABLE",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_CREATE_JOINABLE",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_CREATE_JOINABLE",
            "textEdit": {
               "newText": "PTHREAD_CREATE_JOINABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "insertText": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
            "textEdit": {
               "newText": "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_INITIALIZER",
            "insertText": "PTHREAD_MUTEX_INITIALIZER",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_MUTEX_INITIALIZER",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_MUTEX_INITIALIZER",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_INITIALIZER",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_ONCE_INIT",
            "insertText": "PTHREAD_ONCE_INIT",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_ONCE_INIT",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_ONCE_INIT",
            "textEdit": {
               "newText": "PTHREAD_ONCE_INIT",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_PRIVATE",
            "insertText": "PTHREAD_PROCESS_PRIVATE",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_PROCESS_PRIVATE",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_PROCESS_PRIVATE",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_PRIVATE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_SHARED",
            "insertText": "PTHREAD_PROCESS_SHARED",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_PROCESS_SHARED",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_PROCESS_SHARED",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_SHARED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "insertText": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
            "textEdit": {
               "newText": "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_SCOPE_SYSTEM",
            "insertText": "PTHREAD_SCOPE_SYSTEM",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "PTHREAD_SCOPE_SYSTEM",
            "score": 0.8430243730545044,
            "sortText": "40a82f8ePTHREAD_SCOPE_SYSTEM",
            "textEdit": {
               "newText": "PTHREAD_SCOPE_SYSTEM",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cleanup_pop",
            "insertText": "pthread_cleanup_pop(${1:execute})",
            "insertTextFormat": 2,
            "kind": 1,
            "label": "pthread_cleanup_pop(execute)",
            "score": 0.8430243730545044,
            "sortText": "40a82f8epthread_cleanup_pop",
            "textEdit": {
               "newText": "pthread_cleanup_pop(${1:execute})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cleanup_pop_restore_np",
            "insertText": "pthread_cleanup_pop_restore_np(${1:execute})",
            "insertTextFormat": 2,
            "kind": 1,
            "label": "pthread_cleanup_pop_restore_np(execute)",
            "score": 0.8430243730545044,
            "sortText": "40a82f8epthread_cleanup_pop_restore_np",
            "textEdit": {
               "newText": "pthread_cleanup_pop_restore_np(${1:execute})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cleanup_push",
            "insertText": "pthread_cleanup_push(${1:routine}, ${2:arg})",
            "insertTextFormat": 2,
            "kind": 1,
            "label": "pthread_cleanup_push(routine, arg)",
            "score": 0.8430243730545044,
            "sortText": "40a82f8epthread_cleanup_push",
            "textEdit": {
               "newText": "pthread_cleanup_push(${1:routine}, ${2:arg})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet bit set in CPUSET representing the processors threads created with ATTR can run on."
            },
            "filterText": "pthread_attr_getaffinity_np",
            "insertText": "pthread_attr_getaffinity_np(${1:const pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getaffinity_np(const pthread_attr_t *attr, size_t cpusetsize, cpu_set_t *cpuset)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getaffinity_np",
            "textEdit": {
               "newText": "pthread_attr_getaffinity_np(${1:const pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet detach state attribute."
            },
            "filterText": "pthread_attr_getdetachstate",
            "insertText": "pthread_attr_getdetachstate(${1:const pthread_attr_t *attr}, ${2:int *detachstate})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getdetachstate",
            "textEdit": {
               "newText": "pthread_attr_getdetachstate(${1:const pthread_attr_t *attr}, ${2:int *detachstate})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the size of the guard area created for stack overflow protection."
            },
            "filterText": "pthread_attr_getguardsize",
            "insertText": "pthread_attr_getguardsize(${1:const pthread_attr_t *attr}, ${2:size_t *guardsize})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getguardsize",
            "textEdit": {
               "newText": "pthread_attr_getguardsize(${1:const pthread_attr_t *attr}, ${2:size_t *guardsize})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *INHERIT the scheduling inheritance mode of *ATTR."
            },
            "filterText": "pthread_attr_getinheritsched",
            "insertText": "pthread_attr_getinheritsched(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict inherit})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getinheritsched(const pthread_attr_t *__restrict attr, int *__restrict inherit)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getinheritsched",
            "textEdit": {
               "newText": "pthread_attr_getinheritsched(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict inherit})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *SCOPE the scheduling contention scope of *ATTR."
            },
            "filterText": "pthread_attr_getscope",
            "insertText": "pthread_attr_getscope(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict scope})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getscope(const pthread_attr_t *__restrict attr, int *__restrict scope)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getscope",
            "textEdit": {
               "newText": "pthread_attr_getscope(${1:const pthread_attr_t *__restrict attr}, ${2:int *__restrict scope})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn the previously set address for the stack."
            },
            "filterText": "pthread_attr_getstack",
            "insertText": "pthread_attr_getstack(${1:const pthread_attr_t *__restrict attr}, ${2:void **__restrict stackaddr}, ${3:size_t *__restrict stacksize})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getstack(const pthread_attr_t *__restrict attr, void **__restrict stackaddr, size_t *__restrict stacksize)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getstack",
            "textEdit": {
               "newText": "pthread_attr_getstack(${1:const pthread_attr_t *__restrict attr}, ${2:void **__restrict stackaddr}, ${3:size_t *__restrict stacksize})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn the currently used minimal stack size."
            },
            "filterText": "pthread_attr_getstacksize",
            "insertText": "pthread_attr_getstacksize(${1:const pthread_attr_t *__restrict attr}, ${2:size_t *__restrict stacksize})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_getstacksize(const pthread_attr_t *__restrict attr, size_t *__restrict stacksize)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_getstacksize",
            "textEdit": {
               "newText": "pthread_attr_getstacksize(${1:const pthread_attr_t *__restrict attr}, ${2:size_t *__restrict stacksize})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nThread created with attribute ATTR will be limited to run only on the processors represented in CPUSET."
            },
            "filterText": "pthread_attr_setaffinity_np",
            "insertText": "pthread_attr_setaffinity_np(${1:pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:const cpu_set_t *cpuset})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setaffinity_np(pthread_attr_t *attr, size_t cpusetsize, const cpu_set_t *cpuset)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setaffinity_np",
            "textEdit": {
               "newText": "pthread_attr_setaffinity_np(${1:pthread_attr_t *attr}, ${2:size_t cpusetsize}, ${3:const cpu_set_t *cpuset})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet detach state attribute."
            },
            "filterText": "pthread_attr_setdetachstate",
            "insertText": "pthread_attr_setdetachstate(${1:pthread_attr_t *attr}, ${2:int detachstate})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setdetachstate",
            "textEdit": {
               "newText": "pthread_attr_setdetachstate(${1:pthread_attr_t *attr}, ${2:int detachstate})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet scheduling inheritance mode in *ATTR according to INHERIT."
            },
            "filterText": "pthread_attr_setinheritsched",
            "insertText": "pthread_attr_setinheritsched(${1:pthread_attr_t *attr}, ${2:int inherit})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setinheritsched(pthread_attr_t *attr, int inherit)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setinheritsched",
            "textEdit": {
               "newText": "pthread_attr_setinheritsched(${1:pthread_attr_t *attr}, ${2:int inherit})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet scheduling policy in *ATTR according to POLICY."
            },
            "filterText": "pthread_attr_setschedpolicy",
            "insertText": "pthread_attr_setschedpolicy(${1:pthread_attr_t *attr}, ${2:int policy})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setschedpolicy",
            "textEdit": {
               "newText": "pthread_attr_setschedpolicy(${1:pthread_attr_t *attr}, ${2:int policy})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet scheduling contention scope in *ATTR according to SCOPE."
            },
            "filterText": "pthread_attr_setscope",
            "insertText": "pthread_attr_setscope(${1:pthread_attr_t *attr}, ${2:int scope})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setscope(pthread_attr_t *attr, int scope)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setscope",
            "textEdit": {
               "newText": "pthread_attr_setscope(${1:pthread_attr_t *attr}, ${2:int scope})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nStore *SIGMASK as the signal mask for the new thread in *ATTR."
            },
            "filterText": "pthread_attr_setsigmask_np",
            "insertText": "pthread_attr_setsigmask_np(${1:pthread_attr_t *attr}, ${2:const __sigset_t *sigmask})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setsigmask_np(pthread_attr_t *attr, const __sigset_t *sigmask)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_attr_setsigmask_np",
            "textEdit": {
               "newText": "pthread_attr_setsigmask_np(${1:pthread_attr_t *attr}, ${2:const __sigset_t *sigmask})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWait on barrier BARRIER."
            },
            "filterText": "pthread_barrier_wait",
            "insertText": "pthread_barrier_wait(${1:pthread_barrier_t *barrier})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_barrier_wait(pthread_barrier_t *barrier)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_barrier_wait",
            "textEdit": {
               "newText": "pthread_barrier_wait(${1:pthread_barrier_t *barrier})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy previously dynamically initialized barrier attribute ATTR."
            },
            "filterText": "pthread_barrierattr_destroy",
            "insertText": "pthread_barrierattr_destroy(${1:pthread_barrierattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_barrierattr_destroy(pthread_barrierattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_barrierattr_destroy",
            "textEdit": {
               "newText": "pthread_barrierattr_destroy(${1:pthread_barrierattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nMake calling thread wait for termination of the thread TH, but only until TIMEOUT measured against the clock specified by CLOCKID. The exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN is not NULL.\nThis function is a cancellation point and therefore not marked with __THROW."
            },
            "filterText": "pthread_clockjoin_np",
            "insertText": "pthread_clockjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:clockid_t clockid}, ${4:const struct timespec *abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_clockjoin_np(pthread_t th, void **thread_return, clockid_t clockid, const struct timespec *abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_clockjoin_np",
            "textEdit": {
               "newText": "pthread_clockjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:clockid_t clockid}, ${4:const struct timespec *abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWake up all threads waiting for condition variables COND."
            },
            "filterText": "pthread_cond_broadcast",
            "insertText": "pthread_cond_broadcast(${1:pthread_cond_t *cond})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_broadcast(pthread_cond_t *cond)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_broadcast",
            "textEdit": {
               "newText": "pthread_cond_broadcast(${1:pthread_cond_t *cond})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_cond_clockwait",
            "insertText": "pthread_cond_clockwait(${1:pthread_cond_t *__restrict cond}, ${2:pthread_mutex_t *__restrict mutex}, ${3:__clockid_t clock_id}, ${4:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_clockwait(pthread_cond_t *__restrict cond, pthread_mutex_t *__restrict mutex, __clockid_t clock_id, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_clockwait",
            "textEdit": {
               "newText": "pthread_cond_clockwait(${1:pthread_cond_t *__restrict cond}, ${2:pthread_mutex_t *__restrict mutex}, ${3:__clockid_t clock_id}, ${4:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy condition variable COND."
            },
            "filterText": "pthread_cond_destroy",
            "insertText": "pthread_cond_destroy(${1:pthread_cond_t *cond})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_destroy(pthread_cond_t *cond)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_destroy",
            "textEdit": {
               "newText": "pthread_cond_destroy(${1:pthread_cond_t *cond})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWake up one thread waiting for condition variable COND."
            },
            "filterText": "pthread_cond_signal",
            "insertText": "pthread_cond_signal(${1:pthread_cond_t *cond})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_cond_signal(pthread_cond_t *cond)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_cond_signal",
            "textEdit": {
               "newText": "pthread_cond_signal(${1:pthread_cond_t *cond})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_destroy",
            "insertText": "pthread_condattr_destroy(${1:pthread_condattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_destroy(pthread_condattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_destroy",
            "textEdit": {
               "newText": "pthread_condattr_destroy(${1:pthread_condattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the clock selected for the condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_getclock",
            "insertText": "pthread_condattr_getclock(${1:const pthread_condattr_t *__restrict attr}, ${2:__clockid_t *__restrict clock_id})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_getclock(const pthread_condattr_t *__restrict attr, __clockid_t *__restrict clock_id)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_getclock",
            "textEdit": {
               "newText": "pthread_condattr_getclock(${1:const pthread_condattr_t *__restrict attr}, ${2:__clockid_t *__restrict clock_id})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the clock selected for the condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_setclock",
            "insertText": "pthread_condattr_setclock(${1:pthread_condattr_t *attr}, ${2:__clockid_t clock_id})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_setclock(pthread_condattr_t *attr, __clockid_t clock_id)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_setclock",
            "textEdit": {
               "newText": "pthread_condattr_setclock(${1:pthread_condattr_t *attr}, ${2:__clockid_t clock_id})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the process-shared flag of the condition variable attribute ATTR."
            },
            "filterText": "pthread_condattr_setpshared",
            "insertText": "pthread_condattr_setpshared(${1:pthread_condattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_condattr_setpshared",
            "textEdit": {
               "newText": "pthread_condattr_setpshared(${1:pthread_condattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nCreate a new thread, starting with execution of START-ROUTINE getting passed ARG. Creation attributed come from ATTR. The new handle is stored in *NEWTHREAD."
            },
            "filterText": "pthread_create",
            "insertText": "pthread_create(${1:pthread_t *__restrict newthread}, ${2:const pthread_attr_t *__restrict attr}, ${3:void *(*start_routine)(void *)}, ${4:void *__restrict arg})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_create(pthread_t *__restrict newthread, const pthread_attr_t *__restrict attr, void *(*start_routine)(void *), void *__restrict arg)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_create",
            "textEdit": {
               "newText": "pthread_create(${1:pthread_t *__restrict newthread}, ${2:const pthread_attr_t *__restrict attr}, ${3:void *(*start_routine)(void *)}, ${4:void *__restrict arg})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nIndicate that the thread TH is never to be joined with PTHREAD_JOIN.\nThe resources of TH will therefore be freed immediately when it terminates, instead of waiting for another thread to perform PTHREAD_JOIN on it."
            },
            "filterText": "pthread_detach",
            "insertText": "pthread_detach(${1:pthread_t th})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_detach(pthread_t th)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_detach",
            "textEdit": {
               "newText": "pthread_detach(${1:pthread_t th})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet bit set in CPUSET representing the processors TH can run on."
            },
            "filterText": "pthread_getaffinity_np",
            "insertText": "pthread_getaffinity_np(${1:pthread_t th}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getaffinity_np(pthread_t th, size_t cpusetsize, cpu_set_t *cpuset)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getaffinity_np",
            "textEdit": {
               "newText": "pthread_getaffinity_np(${1:pthread_t th}, ${2:size_t cpusetsize}, ${3:cpu_set_t *cpuset})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the default attributes used by pthread_create in this process."
            },
            "filterText": "pthread_getattr_default_np",
            "insertText": "pthread_getattr_default_np(${1:pthread_attr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getattr_default_np(pthread_attr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getattr_default_np",
            "textEdit": {
               "newText": "pthread_getattr_default_np(${1:pthread_attr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize thread attribute *ATTR with attributes corresponding to the already running thread TH. It shall be called on uninitialized ATTR and destroyed with pthread_attr_destroy when no longer needed."
            },
            "filterText": "pthread_getattr_np",
            "insertText": "pthread_getattr_np(${1:pthread_t th}, ${2:pthread_attr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getattr_np(pthread_t th, pthread_attr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getattr_np",
            "textEdit": {
               "newText": "pthread_getattr_np(${1:pthread_t th}, ${2:pthread_attr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet ID of CPU-time clock for thread THREAD_ID."
            },
            "filterText": "pthread_getcpuclockid",
            "insertText": "pthread_getcpuclockid(${1:pthread_t thread_id}, ${2:__clockid_t *clock_id})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getcpuclockid(pthread_t thread_id, __clockid_t *clock_id)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getcpuclockid",
            "textEdit": {
               "newText": "pthread_getcpuclockid(${1:pthread_t thread_id}, ${2:__clockid_t *clock_id})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "void *",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current value of the thread-specific data slot identified by KEY."
            },
            "filterText": "pthread_getspecific",
            "insertText": "pthread_getspecific(${1:pthread_key_t key})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_getspecific(pthread_key_t key)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_getspecific",
            "textEdit": {
               "newText": "pthread_getspecific(${1:pthread_key_t key})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nMake calling thread wait for termination of the thread TH. The exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN is not NULL.\nThis function is a cancellation point and therefore not marked with __THROW."
            },
            "filterText": "pthread_join",
            "insertText": "pthread_join(${1:pthread_t th}, ${2:void **thread_return})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_join(pthread_t th, void **thread_return)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_join",
            "textEdit": {
               "newText": "pthread_join(${1:pthread_t th}, ${2:void **thread_return})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nCreate a key value identifying a location in the thread-specific data area. Each thread maintains a distinct thread-specific data area. DESTR_FUNCTION, if non-NULL, is called with the value associated to that key when the key is destroyed.\nDESTR_FUNCTION is not called if the value associated is NULL when the key is destroyed."
            },
            "filterText": "pthread_key_create",
            "insertText": "pthread_key_create(${1:pthread_key_t *key}, ${2:void (*destr_function)(void *)})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_key_create(pthread_key_t *key, void (*destr_function)(void *))",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_key_create",
            "textEdit": {
               "newText": "pthread_key_create(${1:pthread_key_t *key}, ${2:void (*destr_function)(void *)})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy KEY."
            },
            "filterText": "pthread_key_delete",
            "insertText": "pthread_key_delete(${1:pthread_key_t key})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_key_delete(pthread_key_t key)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_key_delete",
            "textEdit": {
               "newText": "pthread_key_delete(${1:pthread_key_t key})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy a mutex."
            },
            "filterText": "pthread_mutex_destroy",
            "insertText": "pthread_mutex_destroy(${1:pthread_mutex_t *mutex})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_destroy(pthread_mutex_t *mutex)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutex_destroy",
            "textEdit": {
               "newText": "pthread_mutex_destroy(${1:pthread_mutex_t *mutex})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize a mutex."
            },
            "filterText": "pthread_mutex_init",
            "insertText": "pthread_mutex_init(${1:pthread_mutex_t *mutex}, ${2:const pthread_mutexattr_t *mutexattr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutex_init",
            "textEdit": {
               "newText": "pthread_mutex_init(${1:pthread_mutex_t *mutex}, ${2:const pthread_mutexattr_t *mutexattr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nLock a mutex."
            },
            "filterText": "pthread_mutex_lock",
            "insertText": "pthread_mutex_lock(${1:pthread_mutex_t *mutex})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_lock(pthread_mutex_t *mutex)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutex_lock",
            "textEdit": {
               "newText": "pthread_mutex_lock(${1:pthread_mutex_t *mutex})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nDestroy mutex attribute object ATTR."
            },
            "filterText": "pthread_mutexattr_destroy",
            "insertText": "pthread_mutexattr_destroy(${1:pthread_mutexattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_destroy(pthread_mutexattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_destroy",
            "textEdit": {
               "newText": "pthread_mutexattr_destroy(${1:pthread_mutexattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *PROTOCOL the mutex protocol attribute in *ATTR."
            },
            "filterText": "pthread_mutexattr_getprotocol",
            "insertText": "pthread_mutexattr_getprotocol(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict protocol})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict attr, int *__restrict protocol)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_getprotocol",
            "textEdit": {
               "newText": "pthread_mutexattr_getprotocol(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict protocol})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGet the robustness flag of the mutex attribute ATTR."
            },
            "filterText": "pthread_mutexattr_getrobust",
            "insertText": "pthread_mutexattr_getrobust(${1:const pthread_mutexattr_t *attr}, ${2:int *robustness})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_getrobust(const pthread_mutexattr_t *attr, int *robustness)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_getrobust",
            "textEdit": {
               "newText": "pthread_mutexattr_getrobust(${1:const pthread_mutexattr_t *attr}, ${2:int *robustness})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn in *KIND the mutex kind attribute in *ATTR."
            },
            "filterText": "pthread_mutexattr_gettype",
            "insertText": "pthread_mutexattr_gettype(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict kind})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict attr, int *__restrict kind)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_gettype",
            "textEdit": {
               "newText": "pthread_mutexattr_gettype(${1:const pthread_mutexattr_t *__restrict attr}, ${2:int *__restrict kind})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize mutex attribute object ATTR with default attributes (kind is PTHREAD_MUTEX_TIMED_NP)."
            },
            "filterText": "pthread_mutexattr_init",
            "insertText": "pthread_mutexattr_init(${1:pthread_mutexattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_init(pthread_mutexattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_init",
            "textEdit": {
               "newText": "pthread_mutexattr_init(${1:pthread_mutexattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the process-shared flag of the mutex attribute ATTR."
            },
            "filterText": "pthread_mutexattr_setpshared",
            "insertText": "pthread_mutexattr_setpshared(${1:pthread_mutexattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_setpshared",
            "textEdit": {
               "newText": "pthread_mutexattr_setpshared(${1:pthread_mutexattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the mutex kind attribute in *ATTR to KIND (either PTHREAD_MUTEX_NORMAL,\nPTHREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_ERRORCHECK, or PTHREAD_MUTEX_DEFAULT)."
            },
            "filterText": "pthread_mutexattr_settype",
            "insertText": "pthread_mutexattr_settype(${1:pthread_mutexattr_t *attr}, ${2:int kind})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_settype(pthread_mutexattr_t *attr, int kind)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_mutexattr_settype",
            "textEdit": {
               "newText": "pthread_mutexattr_settype(${1:pthread_mutexattr_t *attr}, ${2:int kind})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nGuarantee that the initialization function INIT_ROUTINE will be called only once, even if pthread_once is executed several times with the same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or extern variable initialized to PTHREAD_ONCE_INIT.\nThe initialization functions might throw exception which is why this function is not marked with __THROW."
            },
            "filterText": "pthread_once",
            "insertText": "pthread_once(${1:pthread_once_t *once_control}, ${2:void (*init_routine)()})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_once(pthread_once_t *once_control, void (*init_routine)())",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_once",
            "textEdit": {
               "newText": "pthread_once(${1:pthread_once_t *once_control}, ${2:void (*init_routine)()})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockrdlock",
            "insertText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_clockrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_clockwrlock",
            "insertText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict rwlock, clockid_t clockid, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_clockwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_clockwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:clockid_t clockid}, ${3:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nAcquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_rdlock",
            "insertText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_rdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_rdlock",
            "textEdit": {
               "newText": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedrdlock",
            "insertText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_timedrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedrdlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_rwlock_timedwrlock",
            "insertText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict rwlock, const struct timespec *__restrict abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_timedwrlock",
            "textEdit": {
               "newText": "pthread_rwlock_timedwrlock(${1:pthread_rwlock_t *__restrict rwlock}, ${2:const struct timespec *__restrict abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to acquire read lock for RWLOCK."
            },
            "filterText": "pthread_rwlock_tryrdlock",
            "insertText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlock_tryrdlock",
            "textEdit": {
               "newText": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nReturn current setting of reader/writer preference."
            },
            "filterText": "pthread_rwlockattr_getkind_np",
            "insertText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict attr, int *__restrict pref)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_getkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_getkind_np(${1:const pthread_rwlockattr_t *__restrict attr}, ${2:int *__restrict pref})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize attribute object ATTR with default values."
            },
            "filterText": "pthread_rwlockattr_init",
            "insertText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_init",
            "textEdit": {
               "newText": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet reader/write preference."
            },
            "filterText": "pthread_rwlockattr_setkind_np",
            "insertText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *attr, int pref)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_setkind_np",
            "textEdit": {
               "newText": "pthread_rwlockattr_setkind_np(${1:pthread_rwlockattr_t *attr}, ${2:int pref})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet process-shared attribute of ATTR to PSHARED."
            },
            "filterText": "pthread_rwlockattr_setpshared",
            "insertText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_rwlockattr_setpshared",
            "textEdit": {
               "newText": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the default attributes to be used by pthread_create in this process."
            },
            "filterText": "pthread_setattr_default_np",
            "insertText": "pthread_setattr_default_np(${1:const pthread_attr_t *attr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setattr_default_np(const pthread_attr_t *attr)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setattr_default_np",
            "textEdit": {
               "newText": "pthread_setattr_default_np(${1:const pthread_attr_t *attr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet cancellation state of current thread to TYPE, returning the old type in *OLDTYPE if OLDTYPE is not NULL."
            },
            "filterText": "pthread_setcanceltype",
            "insertText": "pthread_setcanceltype(${1:int type}, ${2:int *oldtype})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setcanceltype(int type, int *oldtype)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setcanceltype",
            "textEdit": {
               "newText": "pthread_setcanceltype(${1:int type}, ${2:int *oldtype})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet new concurrency level to LEVEL."
            },
            "filterText": "pthread_setconcurrency",
            "insertText": "pthread_setconcurrency(${1:int level})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setconcurrency(int level)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setconcurrency",
            "textEdit": {
               "newText": "pthread_setconcurrency(${1:int level})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet thread name visible in the kernel and its interfaces."
            },
            "filterText": "pthread_setname_np",
            "insertText": "pthread_setname_np(${1:pthread_t target_thread}, ${2:const char *name})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setname_np(pthread_t target_thread, const char *name)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setname_np",
            "textEdit": {
               "newText": "pthread_setname_np(${1:pthread_t target_thread}, ${2:const char *name})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the scheduling priority for TARGET_THREAD."
            },
            "filterText": "pthread_setschedprio",
            "insertText": "pthread_setschedprio(${1:pthread_t target_thread}, ${2:int prio})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_setschedprio(pthread_t target_thread, int prio)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_setschedprio",
            "textEdit": {
               "newText": "pthread_setschedprio(${1:pthread_t target_thread}, ${2:int prio})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nInitialize the spinlock LOCK. If PSHARED is nonzero the spinlock can be shared between different processes."
            },
            "filterText": "pthread_spin_init",
            "insertText": "pthread_spin_init(${1:pthread_spinlock_t *lock}, ${2:int pshared})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_init(pthread_spinlock_t *lock, int pshared)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_init",
            "textEdit": {
               "newText": "pthread_spin_init(${1:pthread_spinlock_t *lock}, ${2:int pshared})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nWait until spinlock LOCK is retrieved."
            },
            "filterText": "pthread_spin_lock",
            "insertText": "pthread_spin_lock(${1:pthread_spinlock_t *lock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_lock(pthread_spinlock_t *lock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_lock",
            "textEdit": {
               "newText": "pthread_spin_lock(${1:pthread_spinlock_t *lock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nTry to lock spinlock LOCK."
            },
            "filterText": "pthread_spin_trylock",
            "insertText": "pthread_spin_trylock(${1:pthread_spinlock_t *lock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_trylock(pthread_spinlock_t *lock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_trylock",
            "textEdit": {
               "newText": "pthread_spin_trylock(${1:pthread_spinlock_t *lock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nRelease spinlock LOCK."
            },
            "filterText": "pthread_spin_unlock",
            "insertText": "pthread_spin_unlock(${1:pthread_spinlock_t *lock})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_spin_unlock(pthread_spinlock_t *lock)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_spin_unlock",
            "textEdit": {
               "newText": "pthread_spin_unlock(${1:pthread_spinlock_t *lock})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nMake calling thread wait for termination of the thread TH, but only until TIMEOUT. The exit status of the thread is stored in THREAD_RETURN, if THREAD_RETURN is not NULL.\nThis function is a cancellation point and therefore not marked with __THROW."
            },
            "filterText": "pthread_timedjoin_np",
            "insertText": "pthread_timedjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:const struct timespec *abstime})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_timedjoin_np(pthread_t th, void **thread_return, const struct timespec *abstime)",
            "score": 0.423080176115036,
            "sortText": "41276209pthread_timedjoin_np",
            "textEdit": {
               "newText": "pthread_timedjoin_np(${1:pthread_t th}, ${2:void **thread_return}, ${3:const struct timespec *abstime})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "deprecated": true,
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>\nSet the starting address of the stack of the thread to be created.\nDepending on whether the stack grows up or down the value must either be higher or lower than all the address in the memory block. The minimal size of the block must be PTHREAD_STACK_MIN."
            },
            "filterText": "pthread_attr_setstackaddr",
            "insertText": "pthread_attr_setstackaddr(${1:pthread_attr_t *attr}, ${2:void *stackaddr})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr)",
            "score": 0.332123339176178,
            "sortText": "4155f3eepthread_attr_setstackaddr",
            "textEdit": {
               "newText": "pthread_attr_setstackaddr(${1:pthread_attr_t *attr}, ${2:void *stackaddr})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "deprecated": true,
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_mutex_consistent_np",
            "insertText": "pthread_mutex_consistent_np(${1:pthread_mutex_t *})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutex_consistent_np(pthread_mutex_t *)",
            "score": 0.332123339176178,
            "sortText": "4155f3eepthread_mutex_consistent_np",
            "textEdit": {
               "newText": "pthread_mutex_consistent_np(${1:pthread_mutex_t *})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "deprecated": true,
            "detail": "int",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "pthread_mutexattr_setrobust_np",
            "insertText": "pthread_mutexattr_setrobust_np(${1:pthread_mutexattr_t *}, ${2:int})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int)",
            "score": 0.332123339176178,
            "sortText": "4155f3eepthread_mutexattr_setrobust_np",
            "textEdit": {
               "newText": "pthread_mutexattr_setrobust_np(${1:pthread_mutexattr_t *}, ${2:int})",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_DISABLE",
            "insertText": "PTHREAD_CANCEL_DISABLE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CANCEL_DISABLE",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CANCEL_DISABLE",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_DISABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CANCEL_ENABLE",
            "insertText": "PTHREAD_CANCEL_ENABLE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CANCEL_ENABLE",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CANCEL_ENABLE",
            "textEdit": {
               "newText": "PTHREAD_CANCEL_ENABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CREATE_DETACHED",
            "insertText": "PTHREAD_CREATE_DETACHED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CREATE_DETACHED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CREATE_DETACHED",
            "textEdit": {
               "newText": "PTHREAD_CREATE_DETACHED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_CREATE_JOINABLE",
            "insertText": "PTHREAD_CREATE_JOINABLE",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_CREATE_JOINABLE",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_CREATE_JOINABLE",
            "textEdit": {
               "newText": "PTHREAD_CREATE_JOINABLE",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_EXPLICIT_SCHED",
            "insertText": "PTHREAD_EXPLICIT_SCHED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_EXPLICIT_SCHED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_EXPLICIT_SCHED",
            "textEdit": {
               "newText": "PTHREAD_EXPLICIT_SCHED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_INHERIT_SCHED",
            "insertText": "PTHREAD_INHERIT_SCHED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_INHERIT_SCHED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_INHERIT_SCHED",
            "textEdit": {
               "newText": "PTHREAD_INHERIT_SCHED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_ERRORCHECK_NP",
            "insertText": "PTHREAD_MUTEX_ERRORCHECK_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_ERRORCHECK_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_ERRORCHECK_NP",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_ERRORCHECK_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_ROBUST",
            "insertText": "PTHREAD_MUTEX_ROBUST",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_ROBUST",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_ROBUST",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_ROBUST",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_STALLED",
            "insertText": "PTHREAD_MUTEX_STALLED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_STALLED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_STALLED",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_STALLED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_STALLED_NP",
            "insertText": "PTHREAD_MUTEX_STALLED_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_STALLED_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_STALLED_NP",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_STALLED_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_MUTEX_TIMED_NP",
            "insertText": "PTHREAD_MUTEX_TIMED_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_MUTEX_TIMED_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_MUTEX_TIMED_NP",
            "textEdit": {
               "newText": "PTHREAD_MUTEX_TIMED_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_PROCESS_SHARED",
            "insertText": "PTHREAD_PROCESS_SHARED",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_PROCESS_SHARED",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_PROCESS_SHARED",
            "textEdit": {
               "newText": "PTHREAD_PROCESS_SHARED",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertText": "PTHREAD_RWLOCK_DEFAULT_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_DEFAULT_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_RWLOCK_DEFAULT_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_DEFAULT_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_RWLOCK_PREFER_WRITER_NP",
            "textEdit": {
               "newText": "PTHREAD_RWLOCK_PREFER_WRITER_NP",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <pthread.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "detail": "enum <anonymous>",
            "documentation": {
               "kind": "plaintext",
               "value": "From <pthread.h>"
            },
            "filterText": "PTHREAD_SCOPE_PROCESS",
            "insertText": "PTHREAD_SCOPE_PROCESS",
            "insertTextFormat": 1,
            "kind": 13,
            "label": "PTHREAD_SCOPE_PROCESS",
            "score": 0.25669535994529724,
            "sortText": "417c926dPTHREAD_SCOPE_PROCESS",
            "textEdit": {
               "newText": "PTHREAD_SCOPE_PROCESS",
               "range": {
                  "end": {
                     "character": 3,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:25:01.825] <-- textDocument/didChange
I[09:25:01.852] Failed to find compilation database for /home/was/a.cpp

--- [09:25:01.825100] Send (notification): textDocument/didChange
Eval in Emacs: (lsp-bridge-diagnostic--render '"/home/was/a.cpp" '((:code "undeclared_var_use" :message "Use of undeclared identifier 'pr'" :range (:end (:character 4 :line 5) :start (:character 2 :line 5)) :severity 1 :source "clang")))
I[09:25:03.153] ASTWorker building file /home/was/a.cpp version 13 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp

--- [09:25:02.325586] Send TabNine Complete Request: /home/was/a.cpp
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '())
Discard outdated response: received=56076, latest=59899
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 14
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 2
               },
               "end": {
                  "line": 5,
                  "character": 3
               }
            },
            "rangeLength": 1,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:25:03.154] <-- textDocument/completion(9249)
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  ",
         "after": "\n  return 0;\n}\n",
         "filename": "/home/was/a.cpp",
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}

--- [09:25:03.154877] Send (9249): textDocument/completion
{
   "id": 9249,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 2
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:03.155] <-- textDocument/signatureHelp
--- [09:25:03.155769] Send (7923): textDocument/signatureHelp
(7923)
{
   "id": 7923,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 2
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:03.156] <-- textDocument/didChange

--- [09:25:03.156310] Send (notification): textDocument/didChange
{
   "method": "textDocument/didChange",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp",
         "version": 15
      },
      "contentChanges": [
         {
            "range": {
               "start": {
                  "line": 5,
                  "character": 0
               },
               "end": {
                  "line": 6,
                  "character": 0
               }
            },
            "rangeLength": 3,
            "text": ""
         }
      ]
   },
   "jsonrpc": "2.0"
}
I[09:25:03.156] <-- textDocument/completion(59899)

--- [09:25:03.156947] Send (59899): textDocument/completion
{
   "id": 59899,
   "method": "textDocument/completion",
   "params": {
      "position": {
         "line": 5,
         "character": 0
      },
      "context": {
         "triggerKind": 1
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
I[09:25:03.176] --> textDocument/publishDiagnostics
I[09:25:03.177] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>

--- [09:25:03.177775] Recv notification: textDocument/publishDiagnostics
I[09:25:03.178] Code complete: 98 results from Sema, 100 from Index, 0 matched, 0 from identifiers, 100 returned (incomplete).
I[09:25:03.178] Code complete: sema context Statement, query scopes [,std::] (AnyScope=true), expected type <none>
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [
         {
            "code": "undeclared_var_use",
            "message": "Use of undeclared identifier 'p'",
            "range": {
               "end": {
                  "character": 3,
                  "line": 5
               },
               "start": {
                  "character": 2,
                  "line": 5
               }
            },
            "severity": 1,
            "source": "clang"
         }
      ],
      "uri": "file:///home/was/a.cpp",
      "version": 13
   }
}
I[09:25:03.179] Code complete: 98 results from Sema, 100 from Index, 0 matched, 0 from identifiers, 100 returned (incomplete).
I[09:25:03.182] --> reply:textDocument/completion(9249) 27 ms

--- [09:25:03.185541] Recv response clangd (9249): textDocument/completion
I[09:25:03.186] --> reply:textDocument/completion(59899) 29 ms
{
   "id": 9249,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": true,
      "items": [
         {
            "detail": "int",
            "filterText": "argc",
            "insertText": "argc",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "argc",
            "score": 3.8036673069000244,
            "sortText": "3f8c90b7argc",
            "textEdit": {
               "newText": "argc",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "char **",
            "filterText": "argv",
            "insertText": "argv",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "argv",
            "score": 3.8036673069000244,
            "sortText": "3f8c90b7argv",
            "textEdit": {
               "newText": "argv",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "int",
            "filterText": "main",
            "insertText": "main(${1:int argc}, ${2:char **argv})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "main(int argc, char **argv)",
            "score": 1.6255683898925781,
            "sortText": "402fed60main",
            "textEdit": {
               "newText": "main(${1:int argc}, ${2:char **argv})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "std",
            "insertText": "std",
            "insertTextFormat": 1,
            "kind": 9,
            "label": "std",
            "score": 1.5999544858932495,
            "sortText": "403334b1std",
            "textEdit": {
               "newText": "std",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char",
            "insertText": "char",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char",
            "score": 1.2879788875579834,
            "sortText": "405b2382char",
            "textEdit": {
               "newText": "char",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char16_t",
            "insertText": "char16_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char16_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382char16_t",
            "textEdit": {
               "newText": "char16_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char32_t",
            "insertText": "char32_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char32_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382char32_t",
            "textEdit": {
               "newText": "char32_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "wchar_t",
            "insertText": "wchar_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "wchar_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382wchar_t",
            "textEdit": {
               "newText": "wchar_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "FILE",
            "insertText": "FILE",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "FILE",
            "score": 0.9800145626068115,
            "sortText": "40851dc4FILE",
            "textEdit": {
               "newText": "FILE",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <ctime>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <ctime>"
            },
            "filterText": "TIME_UTC",
            "insertText": "TIME_UTC",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "TIME_UTC",
            "score": 0.8430243730545044,
            "sortText": "40a82f8eTIME_UTC",
            "textEdit": {
               "newText": "TIME_UTC",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Nonnull",
            "insertText": "_Nonnull",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Nonnull",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Nonnull",
            "textEdit": {
               "newText": "_Nonnull",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Null_unspecified",
            "insertText": "_Null_unspecified",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Null_unspecified",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Null_unspecified",
            "textEdit": {
               "newText": "_Null_unspecified",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Nullable",
            "insertText": "_Nullable",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Nullable",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Nullable",
            "textEdit": {
               "newText": "_Nullable",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__FUNCTION__",
            "insertText": "__FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__FUNCTION__",
            "textEdit": {
               "newText": "__FUNCTION__",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__PRETTY_FUNCTION__",
            "insertText": "__PRETTY_FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__PRETTY_FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__PRETTY_FUNCTION__",
            "textEdit": {
               "newText": "__PRETTY_FUNCTION__",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__func__",
            "insertText": "__func__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__func__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__func__",
            "textEdit": {
               "newText": "__func__",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "alignas",
            "insertText": "alignas(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "alignas(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8alignas",
            "textEdit": {
               "newText": "alignas(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "alignof",
            "insertText": "alignof(${0:type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "alignof(type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8alignof",
            "textEdit": {
               "newText": "alignof(${0:type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "auto",
            "insertText": "auto",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "auto",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8auto",
            "textEdit": {
               "newText": "auto",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "bool",
            "insertText": "bool",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "bool",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8bool",
            "textEdit": {
               "newText": "bool",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "class",
            "insertText": "class",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "class",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8class",
            "textEdit": {
               "newText": "class",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "const",
            "insertText": "const",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "const",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8const",
            "textEdit": {
               "newText": "const",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "const_cast",
            "insertText": "const_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "const_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8const_cast",
            "textEdit": {
               "newText": "const_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "constexpr",
            "insertText": "constexpr",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "constexpr",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8constexpr",
            "textEdit": {
               "newText": "constexpr",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "decltype",
            "insertText": "decltype(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "decltype(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8decltype",
            "textEdit": {
               "newText": "decltype(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "delete",
            "insertText": "delete [] ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "delete [] expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8delete",
            "textEdit": {
               "newText": "delete [] ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "delete",
            "insertText": "delete ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "delete expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8delete",
            "textEdit": {
               "newText": "delete ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "do",
            "insertText": "do {\n${1:statements}\n}while (${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "do {statements}while (expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8do",
            "textEdit": {
               "newText": "do {\n${1:statements}\n}while (${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "double",
            "insertText": "double",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "double",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8double",
            "textEdit": {
               "newText": "double",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "dynamic_cast",
            "insertText": "dynamic_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "dynamic_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8dynamic_cast",
            "textEdit": {
               "newText": "dynamic_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "enum",
            "insertText": "enum",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "enum",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8enum",
            "textEdit": {
               "newText": "enum",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "extern",
            "insertText": "extern",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "extern",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8extern",
            "textEdit": {
               "newText": "extern",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "false",
            "insertText": "false",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "false",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8false",
            "textEdit": {
               "newText": "false",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "float",
            "insertText": "float",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "float",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8float",
            "textEdit": {
               "newText": "float",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "for",
            "insertText": "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "for (init-statement; condition; inc-expression) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8for",
            "textEdit": {
               "newText": "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "for",
            "insertText": "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "for (range-declaration : range-expression) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8for",
            "textEdit": {
               "newText": "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "goto",
            "insertText": "goto ${0:label};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "goto label;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8goto",
            "textEdit": {
               "newText": "goto ${0:label};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "if",
            "insertText": "if (${1:condition}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "if (condition) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8if",
            "textEdit": {
               "newText": "if (${1:condition}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "int",
            "insertText": "int",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "int",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8int",
            "textEdit": {
               "newText": "int",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "long",
            "insertText": "long",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "long",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8long",
            "textEdit": {
               "newText": "long",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "new",
            "insertText": "new ${1:type}(${0:expressions})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "new type(expressions)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8new",
            "textEdit": {
               "newText": "new ${1:type}(${0:expressions})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "new",
            "insertText": "new ${1:type}[${2:size}](${0:expressions})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "new type[size](expressions)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8new",
            "textEdit": {
               "newText": "new ${1:type}[${2:size}](${0:expressions})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "noexcept",
            "insertText": "noexcept(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "noexcept(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8noexcept",
            "textEdit": {
               "newText": "noexcept(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "std::nullptr_t",
            "filterText": "nullptr",
            "insertText": "nullptr",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "nullptr",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8nullptr",
            "textEdit": {
               "newText": "nullptr",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "operator",
            "insertText": "operator",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "operator",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8operator",
            "textEdit": {
               "newText": "operator",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "reinterpret_cast",
            "insertText": "reinterpret_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "reinterpret_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8reinterpret_cast",
            "textEdit": {
               "newText": "reinterpret_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "return",
            "insertText": "return ${0:expression};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "return expression;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8return",
            "textEdit": {
               "newText": "return ${0:expression};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "short",
            "insertText": "short",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "short",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8short",
            "textEdit": {
               "newText": "short",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "signed",
            "insertText": "signed",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "signed",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8signed",
            "textEdit": {
               "newText": "signed",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "sizeof",
            "insertText": "sizeof(${0:expression-or-type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "sizeof(expression-or-type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8sizeof",
            "textEdit": {
               "newText": "sizeof(${0:expression-or-type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "sizeof...",
            "insertText": "sizeof...(${0:parameter-pack})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "sizeof...(parameter-pack)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8sizeof...",
            "textEdit": {
               "newText": "sizeof...(${0:parameter-pack})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static",
            "insertText": "static",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "static",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static",
            "textEdit": {
               "newText": "static",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static_assert",
            "insertText": "static_assert(${1:expression}, ${0:message});",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "static_assert(expression, message);",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static_assert",
            "textEdit": {
               "newText": "static_assert(${1:expression}, ${0:message});",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static_cast",
            "insertText": "static_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "static_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static_cast",
            "textEdit": {
               "newText": "static_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "struct",
            "insertText": "struct",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "struct",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8struct",
            "textEdit": {
               "newText": "struct",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "switch",
            "insertText": "switch (${1:condition}) {\n${0:cases}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "switch (condition) {cases}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8switch",
            "textEdit": {
               "newText": "switch (${1:condition}) {\n${0:cases}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "thread_local",
            "insertText": "thread_local",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "thread_local",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8thread_local",
            "textEdit": {
               "newText": "thread_local",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "throw",
            "insertText": "throw ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "throw expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8throw",
            "textEdit": {
               "newText": "throw ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "true",
            "insertText": "true",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "true",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8true",
            "textEdit": {
               "newText": "true",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "try",
            "insertText": "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "try {statements} catch (declaration) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8try",
            "textEdit": {
               "newText": "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typedef",
            "insertText": "typedef ${1:type} ${0:name};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typedef type name;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typedef",
            "textEdit": {
               "newText": "typedef ${1:type} ${0:name};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "std::type_info",
            "filterText": "typeid",
            "insertText": "typeid(${0:expression-or-type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeid(expression-or-type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeid",
            "textEdit": {
               "newText": "typeid(${0:expression-or-type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typename",
            "insertText": "typename ${0:name}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typename name",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typename",
            "textEdit": {
               "newText": "typename ${0:name}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typeof",
            "insertText": "typeof(${0:type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeof(type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeof",
            "textEdit": {
               "newText": "typeof(${0:type})",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typeof",
            "insertText": "typeof ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeof expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeof",
            "textEdit": {
               "newText": "typeof ${0:expression}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "union",
            "insertText": "union",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "union",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8union",
            "textEdit": {
               "newText": "union",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "unsigned",
            "insertText": "unsigned",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "unsigned",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8unsigned",
            "textEdit": {
               "newText": "unsigned",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "using",
            "insertText": "using ${1:name} = ${0:type};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "using name = type;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8using",
            "textEdit": {
               "newText": "using ${1:name} = ${0:type};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "using namespace",
            "insertText": "using namespace ${0:identifier};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "using namespace identifier;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8using namespace",
            "textEdit": {
               "newText": "using namespace ${0:identifier};",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "void",
            "insertText": "void",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "void",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8void",
            "textEdit": {
               "newText": "void",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "volatile",
            "insertText": "volatile",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "volatile",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8volatile",
            "textEdit": {
               "newText": "volatile",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "while",
            "insertText": "while (${1:condition}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "while (condition) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8while",
            "textEdit": {
               "newText": "while (${1:condition}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "u_char",
            "insertText": "u_char",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "u_char",
            "score": 0.7713049054145813,
            "sortText": "40ba8bc3u_char",
            "textEdit": {
               "newText": "u_char",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cwchar>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cwchar>"
            },
            "filterText": "__WCHAR_MAX",
            "insertText": "__WCHAR_MAX",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__WCHAR_MAX",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__WCHAR_MAX",
            "textEdit": {
               "newText": "__WCHAR_MAX",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cwchar>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cwchar>"
            },
            "filterText": "__WCHAR_MIN",
            "insertText": "__WCHAR_MIN",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__WCHAR_MIN",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__WCHAR_MIN",
            "textEdit": {
               "newText": "__WCHAR_MIN",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "__u_char_defined",
            "insertText": "__u_char_defined",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__u_char_defined",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__u_char_defined",
            "textEdit": {
               "newText": "__u_char_defined",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <ctime>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <ctime>"
            },
            "filterText": "sigevent",
            "insertText": "sigevent",
            "insertTextFormat": 1,
            "kind": 7,
            "label": "sigevent",
            "score": 0.5252236127853394,
            "sortText": "40f98af2sigevent",
            "textEdit": {
               "newText": "sigevent",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blkcnt64_t",
            "insertText": "blkcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blkcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blkcnt64_t",
            "textEdit": {
               "newText": "blkcnt64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blkcnt_t",
            "insertText": "blkcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blkcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blkcnt_t",
            "textEdit": {
               "newText": "blkcnt_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blksize_t",
            "insertText": "blksize_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blksize_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blksize_t",
            "textEdit": {
               "newText": "blksize_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "caddr_t",
            "insertText": "caddr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "caddr_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0caddr_t",
            "textEdit": {
               "newText": "caddr_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "daddr_t",
            "insertText": "daddr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "daddr_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0daddr_t",
            "textEdit": {
               "newText": "daddr_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "dev_t",
            "insertText": "dev_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "dev_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0dev_t",
            "textEdit": {
               "newText": "dev_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsblkcnt64_t",
            "insertText": "fsblkcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsblkcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsblkcnt64_t",
            "textEdit": {
               "newText": "fsblkcnt64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsblkcnt_t",
            "insertText": "fsblkcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsblkcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsblkcnt_t",
            "textEdit": {
               "newText": "fsblkcnt_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsfilcnt64_t",
            "insertText": "fsfilcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsfilcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsfilcnt64_t",
            "textEdit": {
               "newText": "fsfilcnt64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsfilcnt_t",
            "insertText": "fsfilcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsfilcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsfilcnt_t",
            "textEdit": {
               "newText": "fsfilcnt_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsid_t",
            "insertText": "fsid_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsid_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsid_t",
            "textEdit": {
               "newText": "fsid_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "gid_t",
            "insertText": "gid_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "gid_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0gid_t",
            "textEdit": {
               "newText": "gid_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "id_t",
            "insertText": "id_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "id_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0id_t",
            "textEdit": {
               "newText": "id_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "ino64_t",
            "insertText": "ino64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "ino64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0ino64_t",
            "textEdit": {
               "newText": "ino64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "ino_t",
            "insertText": "ino_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "ino_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0ino_t",
            "textEdit": {
               "newText": "ino_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "key_t",
            "insertText": "key_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "key_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0key_t",
            "textEdit": {
               "newText": "key_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "loff_t",
            "insertText": "loff_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "loff_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0loff_t",
            "textEdit": {
               "newText": "loff_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "mode_t",
            "insertText": "mode_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "mode_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0mode_t",
            "textEdit": {
               "newText": "mode_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "nlink_t",
            "insertText": "nlink_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "nlink_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0nlink_t",
            "textEdit": {
               "newText": "nlink_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "off64_t",
            "insertText": "off64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "off64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0off64_t",
            "textEdit": {
               "newText": "off64_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "off_t",
            "insertText": "off_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "off_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0off_t",
            "textEdit": {
               "newText": "off_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "quad_t",
            "insertText": "quad_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "quad_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0quad_t",
            "textEdit": {
               "newText": "quad_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "register_t",
            "insertText": "register_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "register_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0register_t",
            "textEdit": {
               "newText": "register_t",
               "range": {
                  "end": {
                     "character": 2,
                     "line": 5
                  },
                  "start": {
                     "character": 2,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:25:03.203] --> reply:textDocument/signatureHelp(7923) 47 ms
I[09:25:03.206] Failed to find compilation database for /home/was/a.cpp
I[09:25:03.239] <-- textDocument/signatureHelp(59112)

--- [09:25:03.231911] Send TabNine Complete Request: /home/was/a.cpp

--- [09:25:03.239821] Send (59112): textDocument/signatureHelp
I[09:25:04.013] ASTWorker building file /home/was/a.cpp version 15 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp
Eval in Emacs: (lsp-bridge-search-backend--record-items '"tabnine" '())
Eval in Emacs: (lsp-bridge-diagnostic--render '"/home/was/a.cpp" '((:code "undeclared_var_use" :message "Use of undeclared identifier 'p'" :range (:end (:character 3 :line 5) :start (:character 2 :line 5)) :severity 1 :source "clang")))
Discard outdated response: received=9249, latest=59899
{
   "version": "1.0.14",
   "request": {
      "Autocomplete": {
         "before": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n",
         "after": "  return 0;\n}\n",
         "filename": "/home/was/a.cpp",
         "region_includes_beginning": true,
         "region_includes_end": true,
         "max_num_results": 10
      }
   }
}
{
   "id": 59112,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 0
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}

--- [09:25:04.013751] Recv response clangd (59899): textDocument/completion
{
   "id": 59899,
   "jsonrpc": "2.0",
   "result": {
      "isIncomplete": true,
      "items": [
         {
            "detail": "int",
            "filterText": "argc",
            "insertText": "argc",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "argc",
            "score": 3.8036673069000244,
            "sortText": "3f8c90b7argc",
            "textEdit": {
               "newText": "argc",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "char **",
            "filterText": "argv",
            "insertText": "argv",
            "insertTextFormat": 1,
            "kind": 6,
            "label": "argv",
            "score": 3.8036673069000244,
            "sortText": "3f8c90b7argv",
            "textEdit": {
               "newText": "argv",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "int",
            "filterText": "main",
            "insertText": "main(${1:int argc}, ${2:char **argv})",
            "insertTextFormat": 2,
            "kind": 3,
            "label": "main(int argc, char **argv)",
            "score": 1.6255683898925781,
            "sortText": "402fed60main",
            "textEdit": {
               "newText": "main(${1:int argc}, ${2:char **argv})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "std",
            "insertText": "std",
            "insertTextFormat": 1,
            "kind": 9,
            "label": "std",
            "score": 1.5999544858932495,
            "sortText": "403334b1std",
            "textEdit": {
               "newText": "std",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char",
            "insertText": "char",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char",
            "score": 1.2879788875579834,
            "sortText": "405b2382char",
            "textEdit": {
               "newText": "char",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char16_t",
            "insertText": "char16_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char16_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382char16_t",
            "textEdit": {
               "newText": "char16_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "char32_t",
            "insertText": "char32_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "char32_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382char32_t",
            "textEdit": {
               "newText": "char32_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "wchar_t",
            "insertText": "wchar_t",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "wchar_t",
            "score": 1.2879788875579834,
            "sortText": "405b2382wchar_t",
            "textEdit": {
               "newText": "wchar_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "FILE",
            "insertText": "FILE",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "FILE",
            "score": 0.9800145626068115,
            "sortText": "40851dc4FILE",
            "textEdit": {
               "newText": "FILE",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <ctime>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <ctime>"
            },
            "filterText": "TIME_UTC",
            "insertText": "TIME_UTC",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "TIME_UTC",
            "score": 0.8430243730545044,
            "sortText": "40a82f8eTIME_UTC",
            "textEdit": {
               "newText": "TIME_UTC",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Nonnull",
            "insertText": "_Nonnull",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Nonnull",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Nonnull",
            "textEdit": {
               "newText": "_Nonnull",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Null_unspecified",
            "insertText": "_Null_unspecified",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Null_unspecified",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Null_unspecified",
            "textEdit": {
               "newText": "_Null_unspecified",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "_Nullable",
            "insertText": "_Nullable",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "_Nullable",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8_Nullable",
            "textEdit": {
               "newText": "_Nullable",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__FUNCTION__",
            "insertText": "__FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__FUNCTION__",
            "textEdit": {
               "newText": "__FUNCTION__",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__PRETTY_FUNCTION__",
            "insertText": "__PRETTY_FUNCTION__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__PRETTY_FUNCTION__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__PRETTY_FUNCTION__",
            "textEdit": {
               "newText": "__PRETTY_FUNCTION__",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "__func__",
            "insertText": "__func__",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "__func__",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8__func__",
            "textEdit": {
               "newText": "__func__",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "alignas",
            "insertText": "alignas(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "alignas(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8alignas",
            "textEdit": {
               "newText": "alignas(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "alignof",
            "insertText": "alignof(${0:type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "alignof(type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8alignof",
            "textEdit": {
               "newText": "alignof(${0:type})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "auto",
            "insertText": "auto",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "auto",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8auto",
            "textEdit": {
               "newText": "auto",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "bool",
            "insertText": "bool",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "bool",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8bool",
            "textEdit": {
               "newText": "bool",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "class",
            "insertText": "class",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "class",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8class",
            "textEdit": {
               "newText": "class",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "const",
            "insertText": "const",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "const",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8const",
            "textEdit": {
               "newText": "const",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "const_cast",
            "insertText": "const_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "const_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8const_cast",
            "textEdit": {
               "newText": "const_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "constexpr",
            "insertText": "constexpr",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "constexpr",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8constexpr",
            "textEdit": {
               "newText": "constexpr",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "decltype",
            "insertText": "decltype(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "decltype(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8decltype",
            "textEdit": {
               "newText": "decltype(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "delete",
            "insertText": "delete ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "delete expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8delete",
            "textEdit": {
               "newText": "delete ${0:expression}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "delete",
            "insertText": "delete [] ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "delete [] expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8delete",
            "textEdit": {
               "newText": "delete [] ${0:expression}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "do",
            "insertText": "do {\n${1:statements}\n}while (${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "do {statements}while (expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8do",
            "textEdit": {
               "newText": "do {\n${1:statements}\n}while (${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "double",
            "insertText": "double",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "double",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8double",
            "textEdit": {
               "newText": "double",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "dynamic_cast",
            "insertText": "dynamic_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "dynamic_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8dynamic_cast",
            "textEdit": {
               "newText": "dynamic_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "enum",
            "insertText": "enum",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "enum",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8enum",
            "textEdit": {
               "newText": "enum",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "extern",
            "insertText": "extern",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "extern",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8extern",
            "textEdit": {
               "newText": "extern",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "false",
            "insertText": "false",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "false",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8false",
            "textEdit": {
               "newText": "false",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "float",
            "insertText": "float",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "float",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8float",
            "textEdit": {
               "newText": "float",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "for",
            "insertText": "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "for (init-statement; condition; inc-expression) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8for",
            "textEdit": {
               "newText": "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "for",
            "insertText": "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "for (range-declaration : range-expression) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8for",
            "textEdit": {
               "newText": "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "goto",
            "insertText": "goto ${0:label};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "goto label;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8goto",
            "textEdit": {
               "newText": "goto ${0:label};",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "if",
            "insertText": "if (${1:condition}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "if (condition) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8if",
            "textEdit": {
               "newText": "if (${1:condition}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "int",
            "insertText": "int",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "int",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8int",
            "textEdit": {
               "newText": "int",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "long",
            "insertText": "long",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "long",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8long",
            "textEdit": {
               "newText": "long",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "new",
            "insertText": "new ${1:type}(${0:expressions})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "new type(expressions)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8new",
            "textEdit": {
               "newText": "new ${1:type}(${0:expressions})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "new",
            "insertText": "new ${1:type}[${2:size}](${0:expressions})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "new type[size](expressions)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8new",
            "textEdit": {
               "newText": "new ${1:type}[${2:size}](${0:expressions})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "noexcept",
            "insertText": "noexcept(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "noexcept(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8noexcept",
            "textEdit": {
               "newText": "noexcept(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "std::nullptr_t",
            "filterText": "nullptr",
            "insertText": "nullptr",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "nullptr",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8nullptr",
            "textEdit": {
               "newText": "nullptr",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "operator",
            "insertText": "operator",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "operator",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8operator",
            "textEdit": {
               "newText": "operator",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "reinterpret_cast",
            "insertText": "reinterpret_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "reinterpret_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8reinterpret_cast",
            "textEdit": {
               "newText": "reinterpret_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "return",
            "insertText": "return ${0:expression};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "return expression;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8return",
            "textEdit": {
               "newText": "return ${0:expression};",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "short",
            "insertText": "short",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "short",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8short",
            "textEdit": {
               "newText": "short",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "signed",
            "insertText": "signed",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "signed",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8signed",
            "textEdit": {
               "newText": "signed",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "sizeof",
            "insertText": "sizeof(${0:expression-or-type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "sizeof(expression-or-type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8sizeof",
            "textEdit": {
               "newText": "sizeof(${0:expression-or-type})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "size_t",
            "filterText": "sizeof...",
            "insertText": "sizeof...(${0:parameter-pack})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "sizeof...(parameter-pack)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8sizeof...",
            "textEdit": {
               "newText": "sizeof...(${0:parameter-pack})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static",
            "insertText": "static",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "static",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static",
            "textEdit": {
               "newText": "static",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static_assert",
            "insertText": "static_assert(${1:expression}, ${0:message});",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "static_assert(expression, message);",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static_assert",
            "textEdit": {
               "newText": "static_assert(${1:expression}, ${0:message});",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "static_cast",
            "insertText": "static_cast<${1:type}>(${0:expression})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "static_cast<type>(expression)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8static_cast",
            "textEdit": {
               "newText": "static_cast<${1:type}>(${0:expression})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "struct",
            "insertText": "struct",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "struct",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8struct",
            "textEdit": {
               "newText": "struct",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "switch",
            "insertText": "switch (${1:condition}) {\n${0:cases}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "switch (condition) {cases}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8switch",
            "textEdit": {
               "newText": "switch (${1:condition}) {\n${0:cases}\n}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "thread_local",
            "insertText": "thread_local",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "thread_local",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8thread_local",
            "textEdit": {
               "newText": "thread_local",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "void",
            "filterText": "throw",
            "insertText": "throw ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "throw expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8throw",
            "textEdit": {
               "newText": "throw ${0:expression}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "bool",
            "filterText": "true",
            "insertText": "true",
            "insertTextFormat": 1,
            "kind": 15,
            "label": "true",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8true",
            "textEdit": {
               "newText": "true",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "try",
            "insertText": "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "try {statements} catch (declaration) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8try",
            "textEdit": {
               "newText": "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typedef",
            "insertText": "typedef ${1:type} ${0:name};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typedef type name;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typedef",
            "textEdit": {
               "newText": "typedef ${1:type} ${0:name};",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "detail": "std::type_info",
            "filterText": "typeid",
            "insertText": "typeid(${0:expression-or-type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeid(expression-or-type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeid",
            "textEdit": {
               "newText": "typeid(${0:expression-or-type})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typename",
            "insertText": "typename ${0:name}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typename name",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typename",
            "textEdit": {
               "newText": "typename ${0:name}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typeof",
            "insertText": "typeof(${0:type})",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeof(type)",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeof",
            "textEdit": {
               "newText": "typeof(${0:type})",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "typeof",
            "insertText": "typeof ${0:expression}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "typeof expression",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8typeof",
            "textEdit": {
               "newText": "typeof ${0:expression}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "union",
            "insertText": "union",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "union",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8union",
            "textEdit": {
               "newText": "union",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "unsigned",
            "insertText": "unsigned",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "unsigned",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8unsigned",
            "textEdit": {
               "newText": "unsigned",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "using",
            "insertText": "using ${1:name} = ${0:type};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "using name = type;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8using",
            "textEdit": {
               "newText": "using ${1:name} = ${0:type};",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "using namespace",
            "insertText": "using namespace ${0:identifier};",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "using namespace identifier;",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8using namespace",
            "textEdit": {
               "newText": "using namespace ${0:identifier};",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "void",
            "insertText": "void",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "void",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8void",
            "textEdit": {
               "newText": "void",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "volatile",
            "insertText": "volatile",
            "insertTextFormat": 1,
            "kind": 14,
            "label": "volatile",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8volatile",
            "textEdit": {
               "newText": "volatile",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "filterText": "while",
            "insertText": "while (${1:condition}) {\n${0:statements}\n}",
            "insertTextFormat": 2,
            "kind": 15,
            "label": "while (condition) {statements}",
            "score": 0.8373723030090332,
            "sortText": "40a9a1f8while",
            "textEdit": {
               "newText": "while (${1:condition}) {\n${0:statements}\n}",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "u_char",
            "insertText": "u_char",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "u_char",
            "score": 0.7713049054145813,
            "sortText": "40ba8bc3u_char",
            "textEdit": {
               "newText": "u_char",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cwchar>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cwchar>"
            },
            "filterText": "__WCHAR_MAX",
            "insertText": "__WCHAR_MAX",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__WCHAR_MAX",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__WCHAR_MAX",
            "textEdit": {
               "newText": "__WCHAR_MAX",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <cwchar>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <cwchar>"
            },
            "filterText": "__WCHAR_MIN",
            "insertText": "__WCHAR_MIN",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__WCHAR_MIN",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__WCHAR_MIN",
            "textEdit": {
               "newText": "__WCHAR_MIN",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "__u_char_defined",
            "insertText": "__u_char_defined",
            "insertTextFormat": 1,
            "kind": 1,
            "label": "__u_char_defined",
            "score": 0.7660334706306458,
            "sortText": "40bbe53b__u_char_defined",
            "textEdit": {
               "newText": "__u_char_defined",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <ctime>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 0
                     },
                     "start": {
                        "character": 0,
                        "line": 0
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <ctime>"
            },
            "filterText": "sigevent",
            "insertText": "sigevent",
            "insertTextFormat": 1,
            "kind": 7,
            "label": "sigevent",
            "score": 0.5252236127853394,
            "sortText": "40f98af2sigevent",
            "textEdit": {
               "newText": "sigevent",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blkcnt64_t",
            "insertText": "blkcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blkcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blkcnt64_t",
            "textEdit": {
               "newText": "blkcnt64_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blkcnt_t",
            "insertText": "blkcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blkcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blkcnt_t",
            "textEdit": {
               "newText": "blkcnt_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "blksize_t",
            "insertText": "blksize_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "blksize_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0blksize_t",
            "textEdit": {
               "newText": "blksize_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "caddr_t",
            "insertText": "caddr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "caddr_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0caddr_t",
            "textEdit": {
               "newText": "caddr_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "daddr_t",
            "insertText": "daddr_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "daddr_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0daddr_t",
            "textEdit": {
               "newText": "daddr_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "dev_t",
            "insertText": "dev_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "dev_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0dev_t",
            "textEdit": {
               "newText": "dev_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsblkcnt64_t",
            "insertText": "fsblkcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsblkcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsblkcnt64_t",
            "textEdit": {
               "newText": "fsblkcnt64_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsblkcnt_t",
            "insertText": "fsblkcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsblkcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsblkcnt_t",
            "textEdit": {
               "newText": "fsblkcnt_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsfilcnt64_t",
            "insertText": "fsfilcnt64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsfilcnt64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsfilcnt64_t",
            "textEdit": {
               "newText": "fsfilcnt64_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsfilcnt_t",
            "insertText": "fsfilcnt_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsfilcnt_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsfilcnt_t",
            "textEdit": {
               "newText": "fsfilcnt_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "fsid_t",
            "insertText": "fsid_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "fsid_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0fsid_t",
            "textEdit": {
               "newText": "fsid_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "gid_t",
            "insertText": "gid_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "gid_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0gid_t",
            "textEdit": {
               "newText": "gid_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "id_t",
            "insertText": "id_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "id_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0id_t",
            "textEdit": {
               "newText": "id_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "ino64_t",
            "insertText": "ino64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "ino64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0ino64_t",
            "textEdit": {
               "newText": "ino64_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "ino_t",
            "insertText": "ino_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "ino_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0ino_t",
            "textEdit": {
               "newText": "ino_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "key_t",
            "insertText": "key_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "key_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0key_t",
            "textEdit": {
               "newText": "key_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "loff_t",
            "insertText": "loff_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "loff_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0loff_t",
            "textEdit": {
               "newText": "loff_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "mode_t",
            "insertText": "mode_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "mode_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0mode_t",
            "textEdit": {
               "newText": "mode_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "nlink_t",
            "insertText": "nlink_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "nlink_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0nlink_t",
            "textEdit": {
               "newText": "nlink_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "off64_t",
            "insertText": "off64_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "off64_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0off64_t",
            "textEdit": {
               "newText": "off64_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "off_t",
            "insertText": "off_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "off_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0off_t",
            "textEdit": {
               "newText": "off_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "quad_t",
            "insertText": "quad_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "quad_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0quad_t",
            "textEdit": {
               "newText": "quad_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         },
         {
            "additionalTextEdits": [
               {
                  "newText": "#include <sys/types.h>\n",
                  "range": {
                     "end": {
                        "character": 0,
                        "line": 1
                     },
                     "start": {
                        "character": 0,
                        "line": 1
                     }
                  }
               }
            ],
            "documentation": {
               "kind": "plaintext",
               "value": "From <sys/types.h>"
            },
            "filterText": "register_t",
            "insertText": "register_t",
            "insertTextFormat": 1,
            "kind": 8,
            "label": "register_t",
            "score": 0.5053281784057617,
            "sortText": "40fea2d0register_t",
            "textEdit": {
               "newText": "register_t",
               "range": {
                  "end": {
                     "character": 0,
                     "line": 5
                  },
                  "start": {
                     "character": 0,
                     "line": 5
                  }
               }
            }
         }
      ]
   }
}
I[09:25:04.019] --> textDocument/publishDiagnostics
I[09:25:04.029] --> reply:textDocument/signatureHelp(59112) 789 ms
I[09:25:04.680] <-- textDocument/didSave
I[09:25:04.886] File version went from 15 to 15

--- [09:25:04.680369] Send (notification): textDocument/didSave

--- [09:25:04.887610] Completion items number: 100
{
   "method": "textDocument/didSave",
   "params": {
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}
Eval in Emacs: (lsp-bridge-completion--record-items '"/home/was/a.cpp" '((:key "0,argc" :icon "variable" :label "argc" :display-label "argc" :deprecated () :insertText "argc" :insertTextFormat 1 :textEdit (:newText "argc" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "1,argv" :icon "variable" :label "argv" :display-label "argv" :deprecated () :insertText "argv" :insertTextFormat 1 :textEdit (:newText "argv" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "2,main(int argc, char **argv)" :icon "function" :label "main(int argc, char **argv)" :display-label "main(int argc, char **argv)" :deprecated () :insertText "main(${1:int argc}, ${2:char **argv})" :insertTextFormat 2 :textEdit (:newText "main(${1:int argc}, ${2:char **argv})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "3,std" :icon "module" :label "std" :display-label "std" :deprecated () :insertText "std" :insertTextFormat 1 :textEdit (:newText "std" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "4,char" :icon "keyword" :label "char" :display-label "char" :deprecated () :insertText "char" :insertTextFormat 1 :textEdit (:newText "char" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "5,char16_t" :icon "keyword" :label "char16_t" :display-label "char16_t" :deprecated () :insertText "char16_t" :insertTextFormat 1 :textEdit (:newText "char16_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "6,char32_t" :icon "keyword" :label "char32_t" :display-label "char32_t" :deprecated () :insertText "char32_t" :insertTextFormat 1 :textEdit (:newText "char32_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "7,wchar_t" :icon "keyword" :label "wchar_t" :display-label "wchar_t" :deprecated () :insertText "wchar_t" :insertTextFormat 1 :textEdit (:newText "wchar_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "8,FILE" :icon "interface" :label "FILE" :display-label "FILE" :deprecated () :insertText "FILE" :insertTextFormat 1 :textEdit (:newText "FILE" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "9,TIME_UTC" :icon "text" :label "TIME_UTC" :display-label "TIME_UTC" :deprecated () :insertText "TIME_UTC" :insertTextFormat 1 :textEdit (:newText "TIME_UTC" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <ctime>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "10,_Nonnull" :icon "keyword" :label "_Nonnull" :display-label "_Nonnull" :deprecated () :insertText "_Nonnull" :insertTextFormat 1 :textEdit (:newText "_Nonnull" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "11,_Null_unspecified" :icon "keyword" :label "_Null_unspecified" :display-label "_Null_unspecified" :deprecated () :insertText "_Null_unspecified" :insertTextFormat 1 :textEdit (:newText "_Null_unspecified" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "12,_Nullable" :icon "keyword" :label "_Nullable" :display-label "_Nullable" :deprecated () :insertText "_Nullable" :insertTextFormat 1 :textEdit (:newText "_Nullable" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "13,__FUNCTION__" :icon "keyword" :label "__FUNCTION__" :display-label "__FUNCTION__" :deprecated () :insertText "__FUNCTION__" :insertTextFormat 1 :textEdit (:newText "__FUNCTION__" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "14,__PRETTY_FUNCTION__" :icon "keyword" :label "__PRETTY_FUNCTION__" :display-label "__PRETTY_FUNCTION__" :deprecated () :insertText "__PRETTY_FUNCTION__" :insertTextFormat 1 :textEdit (:newText "__PRETTY_FUNCTION__" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "15,__func__" :icon "keyword" :label "__func__" :display-label "__func__" :deprecated () :insertText "__func__" :insertTextFormat 1 :textEdit (:newText "__func__" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "16,alignas(expression)" :icon "snippet" :label "alignas(expression)" :display-label "alignas(expression)" :deprecated () :insertText "alignas(${0:expression})" :insertTextFormat 2 :textEdit (:newText "alignas(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "17,alignof(type)" :icon "snippet" :label "alignof(type)" :display-label "alignof(type)" :deprecated () :insertText "alignof(${0:type})" :insertTextFormat 2 :textEdit (:newText "alignof(${0:type})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "18,auto" :icon "keyword" :label "auto" :display-label "auto" :deprecated () :insertText "auto" :insertTextFormat 1 :textEdit (:newText "auto" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "19,bool" :icon "keyword" :label "bool" :display-label "bool" :deprecated () :insertText "bool" :insertTextFormat 1 :textEdit (:newText "bool" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "20,class" :icon "keyword" :label "class" :display-label "class" :deprecated () :insertText "class" :insertTextFormat 1 :textEdit (:newText "class" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "21,const" :icon "keyword" :label "const" :display-label "const" :deprecated () :insertText "const" :insertTextFormat 1 :textEdit (:newText "const" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "22,const_cast<type>(expression)" :icon "snippet" :label "const_cast<type>(expression)" :display-label "const_cast<type>(expression)" :deprecated () :insertText "const_cast<${1:type}>(${0:expression})" :insertTextFormat 2 :textEdit (:newText "const_cast<${1:type}>(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "23,constexpr" :icon "keyword" :label "constexpr" :display-label "constexpr" :deprecated () :insertText "constexpr" :insertTextFormat 1 :textEdit (:newText "constexpr" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "24,decltype(expression)" :icon "snippet" :label "decltype(expression)" :display-label "decltype(expression)" :deprecated () :insertText "decltype(${0:expression})" :insertTextFormat 2 :textEdit (:newText "decltype(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "25,delete expression" :icon "snippet" :label "delete expression" :display-label "delete expression" :deprecated () :insertText "delete ${0:expression}" :insertTextFormat 2 :textEdit (:newText "delete ${0:expression}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "26,delete [] expression" :icon "snippet" :label "delete [] expression" :display-label "delete [] expression" :deprecated () :insertText "delete [] ${0:expression}" :insertTextFormat 2 :textEdit (:newText "delete [] ${0:expression}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "27,do {statements}while (expression)" :icon "snippet" :label "do {statements}while (expression)" :display-label "do {statements}while (expression)" :deprecated () :insertText "do {\n${1:statements}\n}while (${0:expression})" :insertTextFormat 2 :textEdit (:newText "do {\n${1:statements}\n}while (${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "28,double" :icon "keyword" :label "double" :display-label "double" :deprecated () :insertText "double" :insertTextFormat 1 :textEdit (:newText "double" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "29,dynamic_cast<type>(expression)" :icon "snippet" :label "dynamic_cast<type>(expression)" :display-label "dynamic_cast<type>(expression)" :deprecated () :insertText "dynamic_cast<${1:type}>(${0:expression})" :insertTextFormat 2 :textEdit (:newText "dynamic_cast<${1:type}>(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "30,enum" :icon "keyword" :label "enum" :display-label "enum" :deprecated () :insertText "enum" :insertTextFormat 1 :textEdit (:newText "enum" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "31,extern" :icon "keyword" :label "extern" :display-label "extern" :deprecated () :insertText "extern" :insertTextFormat 1 :textEdit (:newText "extern" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "32,false" :icon "snippet" :label "false" :display-label "false" :deprecated () :insertText "false" :insertTextFormat 1 :textEdit (:newText "false" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "33,float" :icon "keyword" :label "float" :display-label "float" :deprecated () :insertText "float" :insertTextFormat 1 :textEdit (:newText "float" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "34,for (init-statement; condition; inc-expression) {statements}" :icon "snippet" :label "for (init-statement; condition; inc-expression) {statements}" :display-label "for (init-statement; condition; inc-expression) {statements}" :deprecated () :insertText "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}" :insertTextFormat 2 :textEdit (:newText "for (${1:init-statement}; ${2:condition}; ${3:inc-expression}) {\n${0:statements}\n}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "35,for (range-declaration : range-expression) {statements}" :icon "snippet" :label "for (range-declaration : range-expression) {statements}" :display-label "for (range-declaration : range-expression) {statements}" :deprecated () :insertText "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}" :insertTextFormat 2 :textEdit (:newText "for (${1:range-declaration} : ${2:range-expression}) {\n${0:statements}\n}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "36,goto label;" :icon "snippet" :label "goto label;" :display-label "goto label;" :deprecated () :insertText "goto ${0:label};" :insertTextFormat 2 :textEdit (:newText "goto ${0:label};" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "37,if (condition) {statements}" :icon "snippet" :label "if (condition) {statements}" :display-label "if (condition) {statements}" :deprecated () :insertText "if (${1:condition}) {\n${0:statements}\n}" :insertTextFormat 2 :textEdit (:newText "if (${1:condition}) {\n${0:statements}\n}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "38,int" :icon "keyword" :label "int" :display-label "int" :deprecated () :insertText "int" :insertTextFormat 1 :textEdit (:newText "int" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "39,long" :icon "keyword" :label "long" :display-label "long" :deprecated () :insertText "long" :insertTextFormat 1 :textEdit (:newText "long" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "40,new type(expressions)" :icon "snippet" :label "new type(expressions)" :display-label "new type(expressions)" :deprecated () :insertText "new ${1:type}(${0:expressions})" :insertTextFormat 2 :textEdit (:newText "new ${1:type}(${0:expressions})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "41,new type[size](expressions)" :icon "snippet" :label "new type[size](expressions)" :display-label "new type[size](expressions)" :deprecated () :insertText "new ${1:type}[${2:size}](${0:expressions})" :insertTextFormat 2 :textEdit (:newText "new ${1:type}[${2:size}](${0:expressions})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "42,noexcept(expression)" :icon "snippet" :label "noexcept(expression)" :display-label "noexcept(expression)" :deprecated () :insertText "noexcept(${0:expression})" :insertTextFormat 2 :textEdit (:newText "noexcept(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "43,nullptr" :icon "snippet" :label "nullptr" :display-label "nullptr" :deprecated () :insertText "nullptr" :insertTextFormat 1 :textEdit (:newText "nullptr" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "44,operator" :icon "keyword" :label "operator" :display-label "operator" :deprecated () :insertText "operator" :insertTextFormat 1 :textEdit (:newText "operator" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "45,reinterpret_cast<type>(expression)" :icon "snippet" :label "reinterpret_cast<type>(expression)" :display-label "reinterpret_cast<type>(expression)" :deprecated () :insertText "reinterpret_cast<${1:type}>(${0:expression})" :insertTextFormat 2 :textEdit (:newText "reinterpret_cast<${1:type}>(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "46,return expression;" :icon "snippet" :label "return expression;" :display-label "return expression;" :deprecated () :insertText "return ${0:expression};" :insertTextFormat 2 :textEdit (:newText "return ${0:expression};" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "47,short" :icon "keyword" :label "short" :display-label "short" :deprecated () :insertText "short" :insertTextFormat 1 :textEdit (:newText "short" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "48,signed" :icon "keyword" :label "signed" :display-label "signed" :deprecated () :insertText "signed" :insertTextFormat 1 :textEdit (:newText "signed" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "49,sizeof(expression-or-type)" :icon "snippet" :label "sizeof(expression-or-type)" :display-label "sizeof(expression-or-type)" :deprecated () :insertText "sizeof(${0:expression-or-type})" :insertTextFormat 2 :textEdit (:newText "sizeof(${0:expression-or-type})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "50,sizeof...(parameter-pack)" :icon "snippet" :label "sizeof...(parameter-pack)" :display-label "sizeof...(parameter-pack)" :deprecated () :insertText "sizeof...(${0:parameter-pack})" :insertTextFormat 2 :textEdit (:newText "sizeof...(${0:parameter-pack})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "51,static" :icon "keyword" :label "static" :display-label "static" :deprecated () :insertText "static" :insertTextFormat 1 :textEdit (:newText "static" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "52,static_assert(expression, message);" :icon "snippet" :label "static_assert(expression, message);" :display-label "static_assert(expression, message);" :deprecated () :insertText "static_assert(${1:expression}, ${0:message});" :insertTextFormat 2 :textEdit (:newText "static_assert(${1:expression}, ${0:message});" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "53,static_cast<type>(expression)" :icon "snippet" :label "static_cast<type>(expression)" :display-label "static_cast<type>(expression)" :deprecated () :insertText "static_cast<${1:type}>(${0:expression})" :insertTextFormat 2 :textEdit (:newText "static_cast<${1:type}>(${0:expression})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "54,struct" :icon "keyword" :label "struct" :display-label "struct" :deprecated () :insertText "struct" :insertTextFormat 1 :textEdit (:newText "struct" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "55,switch (condition) {cases}" :icon "snippet" :label "switch (condition) {cases}" :display-label "switch (condition) {cases}" :deprecated () :insertText "switch (${1:condition}) {\n${0:cases}\n}" :insertTextFormat 2 :textEdit (:newText "switch (${1:condition}) {\n${0:cases}\n}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "56,thread_local" :icon "keyword" :label "thread_local" :display-label "thread_local" :deprecated () :insertText "thread_local" :insertTextFormat 1 :textEdit (:newText "thread_local" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "57,throw expression" :icon "snippet" :label "throw expression" :display-label "throw expression" :deprecated () :insertText "throw ${0:expression}" :insertTextFormat 2 :textEdit (:newText "throw ${0:expression}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "58,true" :icon "snippet" :label "true" :display-label "true" :deprecated () :insertText "true" :insertTextFormat 1 :textEdit (:newText "true" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "59,try {statements} catch (declaration) {statements}" :icon "snippet" :label "try {statements} catch (declaration) {statements}" :display-label "try {statements} catch (declaration) {statements}" :deprecated () :insertText "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}" :insertTextFormat 2 :textEdit (:newText "try {\n${1:statements}\n} catch (${2:declaration}) {\n${0:statements}\n}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "60,typedef type name;" :icon "snippet" :label "typedef type name;" :display-label "typedef type name;" :deprecated () :insertText "typedef ${1:type} ${0:name};" :insertTextFormat 2 :textEdit (:newText "typedef ${1:type} ${0:name};" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "61,typeid(expression-or-type)" :icon "snippet" :label "typeid(expression-or-type)" :display-label "typeid(expression-or-type)" :deprecated () :insertText "typeid(${0:expression-or-type})" :insertTextFormat 2 :textEdit (:newText "typeid(${0:expression-or-type})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "62,typename name" :icon "snippet" :label "typename name" :display-label "typename name" :deprecated () :insertText "typename ${0:name}" :insertTextFormat 2 :textEdit (:newText "typename ${0:name}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "63,typeof(type)" :icon "snippet" :label "typeof(type)" :display-label "typeof(type)" :deprecated () :insertText "typeof(${0:type})" :insertTextFormat 2 :textEdit (:newText "typeof(${0:type})" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "64,typeof expression" :icon "snippet" :label "typeof expression" :display-label "typeof expression" :deprecated () :insertText "typeof ${0:expression}" :insertTextFormat 2 :textEdit (:newText "typeof ${0:expression}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "65,union" :icon "keyword" :label "union" :display-label "union" :deprecated () :insertText "union" :insertTextFormat 1 :textEdit (:newText "union" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "66,unsigned" :icon "keyword" :label "unsigned" :display-label "unsigned" :deprecated () :insertText "unsigned" :insertTextFormat 1 :textEdit (:newText "unsigned" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "67,using name = type;" :icon "snippet" :label "using name = type;" :display-label "using name = type;" :deprecated () :insertText "using ${1:name} = ${0:type};" :insertTextFormat 2 :textEdit (:newText "using ${1:name} = ${0:type};" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "68,using namespace identifier;" :icon "snippet" :label "using namespace identifier;" :display-label "using namespace identifier;" :deprecated () :insertText "using namespace ${0:identifier};" :insertTextFormat 2 :textEdit (:newText "using namespace ${0:identifier};" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "69,void" :icon "keyword" :label "void" :display-label "void" :deprecated () :insertText "void" :insertTextFormat 1 :textEdit (:newText "void" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "70,volatile" :icon "keyword" :label "volatile" :display-label "volatile" :deprecated () :insertText "volatile" :insertTextFormat 1 :textEdit (:newText "volatile" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "71,while (condition) {statements}" :icon "snippet" :label "while (condition) {statements}" :display-label "while (condition) {statements}" :deprecated () :insertText "while (${1:condition}) {\n${0:statements}\n}" :insertTextFormat 2 :textEdit (:newText "while (${1:condition}) {\n${0:statements}\n}" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ()) (:key "72,u_char" :icon "interface" :label "u_char" :display-label "u_char" :deprecated () :insertText "u_char" :insertTextFormat 1 :textEdit (:newText "u_char" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "73,__WCHAR_MAX" :icon "text" :label "__WCHAR_MAX" :display-label "__WCHAR_MAX" :deprecated () :insertText "__WCHAR_MAX" :insertTextFormat 1 :textEdit (:newText "__WCHAR_MAX" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cwchar>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "74,__WCHAR_MIN" :icon "text" :label "__WCHAR_MIN" :display-label "__WCHAR_MIN" :deprecated () :insertText "__WCHAR_MIN" :insertTextFormat 1 :textEdit (:newText "__WCHAR_MIN" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <cwchar>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "75,__u_char_defined" :icon "text" :label "__u_char_defined" :display-label "__u_char_defined" :deprecated () :insertText "__u_char_defined" :insertTextFormat 1 :textEdit (:newText "__u_char_defined" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "76,sigevent" :icon "class" :label "sigevent" :display-label "sigevent" :deprecated () :insertText "sigevent" :insertTextFormat 1 :textEdit (:newText "sigevent" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <ctime>\n" :range (:end (:character 0 :line 0) :start (:character 0 :line 0))))) (:key "77,blkcnt64_t" :icon "interface" :label "blkcnt64_t" :display-label "blkcnt64_t" :deprecated () :insertText "blkcnt64_t" :insertTextFormat 1 :textEdit (:newText "blkcnt64_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "78,blkcnt_t" :icon "interface" :label "blkcnt_t" :display-label "blkcnt_t" :deprecated () :insertText "blkcnt_t" :insertTextFormat 1 :textEdit (:newText "blkcnt_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "79,blksize_t" :icon "interface" :label "blksize_t" :display-label "blksize_t" :deprecated () :insertText "blksize_t" :insertTextFormat 1 :textEdit (:newText "blksize_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "80,caddr_t" :icon "interface" :label "caddr_t" :display-label "caddr_t" :deprecated () :insertText "caddr_t" :insertTextFormat 1 :textEdit (:newText "caddr_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "81,daddr_t" :icon "interface" :label "daddr_t" :display-label "daddr_t" :deprecated () :insertText "daddr_t" :insertTextFormat 1 :textEdit (:newText "daddr_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "82,dev_t" :icon "interface" :label "dev_t" :display-label "dev_t" :deprecated () :insertText "dev_t" :insertTextFormat 1 :textEdit (:newText "dev_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "83,fsblkcnt64_t" :icon "interface" :label "fsblkcnt64_t" :display-label "fsblkcnt64_t" :deprecated () :insertText "fsblkcnt64_t" :insertTextFormat 1 :textEdit (:newText "fsblkcnt64_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "84,fsblkcnt_t" :icon "interface" :label "fsblkcnt_t" :display-label "fsblkcnt_t" :deprecated () :insertText "fsblkcnt_t" :insertTextFormat 1 :textEdit (:newText "fsblkcnt_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "85,fsfilcnt64_t" :icon "interface" :label "fsfilcnt64_t" :display-label "fsfilcnt64_t" :deprecated () :insertText "fsfilcnt64_t" :insertTextFormat 1 :textEdit (:newText "fsfilcnt64_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "86,fsfilcnt_t" :icon "interface" :label "fsfilcnt_t" :display-label "fsfilcnt_t" :deprecated () :insertText "fsfilcnt_t" :insertTextFormat 1 :textEdit (:newText "fsfilcnt_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "87,fsid_t" :icon "interface" :label "fsid_t" :display-label "fsid_t" :deprecated () :insertText "fsid_t" :insertTextFormat 1 :textEdit (:newText "fsid_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "88,gid_t" :icon "interface" :label "gid_t" :display-label "gid_t" :deprecated () :insertText "gid_t" :insertTextFormat 1 :textEdit (:newText "gid_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "89,id_t" :icon "interface" :label "id_t" :display-label "id_t" :deprecated () :insertText "id_t" :insertTextFormat 1 :textEdit (:newText "id_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "90,ino64_t" :icon "interface" :label "ino64_t" :display-label "ino64_t" :deprecated () :insertText "ino64_t" :insertTextFormat 1 :textEdit (:newText "ino64_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "91,ino_t" :icon "interface" :label "ino_t" :display-label "ino_t" :deprecated () :insertText "ino_t" :insertTextFormat 1 :textEdit (:newText "ino_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "92,key_t" :icon "interface" :label "key_t" :display-label "key_t" :deprecated () :insertText "key_t" :insertTextFormat 1 :textEdit (:newText "key_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "93,loff_t" :icon "interface" :label "loff_t" :display-label "loff_t" :deprecated () :insertText "loff_t" :insertTextFormat 1 :textEdit (:newText "loff_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "94,mode_t" :icon "interface" :label "mode_t" :display-label "mode_t" :deprecated () :insertText "mode_t" :insertTextFormat 1 :textEdit (:newText "mode_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "95,nlink_t" :icon "interface" :label "nlink_t" :display-label "nlink_t" :deprecated () :insertText "nlink_t" :insertTextFormat 1 :textEdit (:newText "nlink_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "96,off64_t" :icon "interface" :label "off64_t" :display-label "off64_t" :deprecated () :insertText "off64_t" :insertTextFormat 1 :textEdit (:newText "off64_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "97,off_t" :icon "interface" :label "off_t" :display-label "off_t" :deprecated () :insertText "off_t" :insertTextFormat 1 :textEdit (:newText "off_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "98,quad_t" :icon "interface" :label "quad_t" :display-label "quad_t" :deprecated () :insertText "quad_t" :insertTextFormat 1 :textEdit (:newText "quad_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1))))) (:key "99,register_t" :icon "interface" :label "register_t" :display-label "register_t" :deprecated () :insertText "register_t" :insertTextFormat 1 :textEdit (:newText "register_t" :range (:end (:character 0 :line 5) :start (:character 0 :line 5))) :server "clangd" :backend "lsp" :additionalTextEdits ((:newText "#include <sys/types.h>\n" :range (:end (:character 0 :line 1) :start (:character 0 :line 1)))))) '(:line 5 :character 0) '"clangd" '("." "<" ">" ":" "\"" "/" "*") '("clangd"))
I[09:25:04.936] Failed to find compilation database for /home/was/a.cpp
I[09:25:05.206] <-- textDocument/signatureHelp(48109)
I[09:25:05.385] ASTWorker building file /home/was/a.cpp version 15 with command clangd fallback
[/home/was]
/usr/bin/clang -resource-dir=/usr/lib/clang/14.0.6 -- /home/was/a.cpp

--- [09:25:05.206205] Send (48109): textDocument/signatureHelp
{
   "id": 48109,
   "method": "textDocument/signatureHelp",
   "params": {
      "position": {
         "line": 5,
         "character": 0
      },
      "textDocument": {
         "uri": "file:///home/was/a.cpp"
      }
   },
   "jsonrpc": "2.0"
}

--- [09:25:05.388014] Recv response clangd (7923): textDocument/signatureHelp
{
   "id": 7923,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
Discard outdated response: received=7923, latest=48109

--- [09:25:05.388540] Recv notification: textDocument/publishDiagnostics
{
   "jsonrpc": "2.0",
   "method": "textDocument/publishDiagnostics",
   "params": {
      "diagnostics": [],
      "uri": "file:///home/was/a.cpp",
      "version": 15
   }
}

--- [09:25:05.389320] Recv response clangd (59112): textDocument/signatureHelp
{
   "id": 59112,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
Discard outdated response: received=59112, latest=48109
I[09:25:05.421] --> reply:textDocument/signatureHelp(48109) 214 ms

--- [09:25:05.421288] Recv response clangd (48109): textDocument/signatureHelp
{
   "id": 48109,
   "jsonrpc": "2.0",
   "result": {
      "activeParameter": 0,
      "activeSignature": 0,
      "signatures": []
   }
}
Eval in Emacs: (lsp-bridge-diagnostic--render '"/home/was/a.cpp" '())

